import os
import logging
import threading
import time
import re
from datetime import datetime, timedelta
import telebot
from dotenv import load_dotenv
import psycopg2
from psycopg2.extras import RealDictCursor

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
ADMIN_ID = os.getenv('ADMIN_ID')
DATABASE_URL = os.getenv('DATABASE_URL')

bot = telebot.TeleBot(BOT_TOKEN)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã)
TIMEZONE_OFFSET = 3

def get_current_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –ø–æ–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"""
    return datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)

class DatabaseManager:
    def __init__(self):
        self.conn = None
        self.init_db()
    
    def get_connection(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL"""
        if self.conn is None or self.conn.closed:
            if DATABASE_URL:
                self.conn = psycopg2.connect(DATABASE_URL, sslmode='require')
            else:
                logger.error("DATABASE_URL not found")
                raise Exception("Database connection failed")
        return self.conn
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS scheduled_posts (
                    id SERIAL PRIMARY KEY,
                    message_text TEXT,
                    scheduled_time TIMESTAMP,
                    is_published BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            conn.commit()
            logger.info("‚úÖ PostgreSQL database initialized")
        except Exception as e:
            logger.error(f"‚ùå Database init error: {e}")

    def save_scheduled_post(self, message_text, scheduled_time):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO scheduled_posts (message_text, scheduled_time)
                VALUES (%s, %s)
                RETURNING id
            ''', (message_text, scheduled_time))
            conn.commit()
            post_id = cursor.fetchone()[0]
            return post_id
        except Exception as e:
            logger.error(f"‚ùå Error saving post: {e}")
            raise
    
    def get_pending_posts(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, message_text, scheduled_time 
                FROM scheduled_posts 
                WHERE is_published = FALSE
                ORDER BY scheduled_time
            ''')
            posts = cursor.fetchall()
            return posts
        except Exception as e:
            logger.error(f"‚ùå Error getting posts: {e}")
            return []
    
    def mark_as_published(self, post_id):
        """–û—Ç–º–µ—á–∞–µ—Ç –ø–æ—Å—Ç –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE scheduled_posts 
                SET is_published = TRUE 
                WHERE id = %s
            ''', (post_id,))
            conn.commit()
        except Exception as e:
            logger.error(f"‚ùå Error marking post: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = DatabaseManager()

def send_formatted_message(chat_id, text):
    """–£–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    # –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = text.replace('\\n', '\n')
    
    try:
        # –ü—Ä–æ–±—É–µ–º Markdown
        bot.send_message(chat_id, text, parse_mode='Markdown')
        return True
    except:
        try:
            # –ü—Ä–æ–±—É–µ–º HTML
            html_text = text
            html_text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', html_text)
            html_text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', html_text)
            html_text = re.sub(r'__(.*?)__', r'<u>\1</u>', html_text)
            bot.send_message(chat_id, html_text, parse_mode='HTML')
            return True
        except:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            bot.send_message(chat_id, text, parse_mode=None)
            return True

def publish_scheduled_posts():
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    try:
        posts = db.get_pending_posts()
        now = get_current_time()
        
        published_count = 0
        for post in posts:
            post_id, message_text, scheduled_time = post
            time_left = (scheduled_time - now).total_seconds()
            
            if time_left <= 0:
                try:
                    success = send_formatted_message(CHANNEL_ID, message_text)
                    if success:
                        db.mark_as_published(post_id)
                        published_count += 1
                        logger.info(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç ID: {post_id}")
                    time.sleep(1)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        
        if published_count > 0:
            logger.info(f"üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {published_count}")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")

def post_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤"""
    logger.info("üïí –ó–∞–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤")
    while True:
        try:
            publish_scheduled_posts()
            time.sleep(30)
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            time.sleep(30)

def safe_polling():
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    while True:
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            bot.polling(none_stop=True, interval=1, timeout=60)
        except Exception as e:
            if "409" in str(e):
                logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç - –∂–¥—É 10 —Å–µ–∫—É–Ω–¥")
                time.sleep(10)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                time.sleep(30)

@bot.message_handler(commands=['start'])
def start_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ start"""
    if str(message.from_user.id) == ADMIN_ID:
        current_time = get_current_time()
        response = f"""
ü§ñ *–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º*

‚è∞ –í—Ä–µ–º—è: {current_time.strftime('%H:%M %d.%m.%Y')}

‚öôÔ∏è *–ö–æ–º–∞–Ω–¥—ã:*
/post_now - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç
/schedule - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç  
/list_posts - —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üìù *–ü—Ä–∏–º–µ—Ä:*
/schedule "**–í–∞–∂–Ω–æ** —Å–æ–æ–±—â–µ–Ω–∏–µ" 2024-01-15 15:30
"""
    else:
        response = """
üëã *–ü—Ä–∏–≤–µ—Ç!*

–Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞ *"–û–±–æ –≤—Å—ë–º —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–º"* üèÜ

üìå –ú—ã –ø—É–±–ª–∏–∫—É–µ–º:
‚Ä¢ –ü–µ—Ä–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è
‚Ä¢ –ú–∏—Ä–æ–≤—ã–µ —Ä–µ–∫–æ—Ä–¥—ã
‚Ä¢ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

üí° *–ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ —Å–∞–º–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ!*
"""
    
    bot.reply_to(message, response, parse_mode='Markdown')

@bot.message_handler(commands=['post_now'])
def post_now_command(message):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    text = message.text.replace('/post_now', '').strip()
    if not text:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post_now –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞')
        return

    try:
        success = send_formatted_message(CHANNEL_ID, text)
        if success:
            bot.reply_to(message, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['schedule'])
def schedule_command(message):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    try:
        parts = message.text.split('"')
        if len(parts) < 3:
            bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /schedule "–¢–µ–∫—Å—Ç" 2024-01-15 15:00')
            return

        message_text = parts[1]
        datetime_part = parts[2].strip().split()
        
        if len(datetime_part) < 2:
            bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
            return

        date_str, time_str = datetime_part[0], datetime_part[1]
        scheduled_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        
        if scheduled_time <= get_current_time():
            bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è!")
            return

        post_id = db.save_scheduled_post(message_text, scheduled_time)
        bot.reply_to(message, f"‚úÖ –ü–æ—Å—Ç #{post_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time.strftime('%H:%M %d.%m.%Y')}")
        
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['list_posts'])
def list_posts_command(message):
    """–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    posts = db.get_pending_posts()
    now = get_current_time()
    
    if not posts:
        bot.reply_to(message, "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        return

    response = "üìÖ *–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:*\n\n"
    for post in posts:
        post_id, text, post_time = post
        time_str = post_time.strftime('%d.%m %H:%M')
        time_left = (post_time - now).total_seconds()
        
        status = "‚úÖ –ì–û–¢–û–í" if time_left <= 0 else f"‚è≥ {int(time_left/60)} –º–∏–Ω"
        response += f"üÜî {post_id} | {status}\n"
        response += f"üìÖ {time_str}\n"
        response += f"üìù {text[:50]}...\n"
        response += "‚îÄ" * 30 + "\n"

    bot.reply_to(message, response, parse_mode='Markdown')

@bot.message_handler(commands=['stats'])
def stats_command(message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    try:
        current_time = get_current_time()
        
        posts = db.get_pending_posts()
        pending_count = len(posts)
        
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM scheduled_posts WHERE is_published = TRUE')
        published_count = cursor.fetchone()[0]
        
        stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*

üóÉÔ∏è *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:* ‚úÖ PostgreSQL
üìä *–ü—É–±–ª–∏–∫–∞—Ü–∏–∏:*
‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count}
‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_count}

‚è∞ *–í—Ä–µ–º—è:* {current_time.strftime('%H:%M %d.%m.%Y')}

*–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ!* üöÄ
"""
        bot.reply_to(message, stats_text, parse_mode='Markdown')
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    if not all([BOT_TOKEN, CHANNEL_ID, ADMIN_ID]):
        logger.error("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler_thread = threading.Thread(target=post_scheduler, daemon=True)
    scheduler_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    safe_polling()

if __name__ == '__main__':
    main()
