import os
import logging
import threading
import time
import re
import requests
import io
import urllib.parse
from datetime import datetime, timedelta, timezone
from PIL import Image
import telebot
from dotenv import load_dotenv
import psycopg2
from psycopg2.extras import RealDictCursor

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
ADMIN_ID = os.getenv('ADMIN_ID')
DATABASE_URL = os.getenv('DATABASE_URL')

bot = telebot.TeleBot(BOT_TOKEN)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã)
TIMEZONE_OFFSET = 3

# –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
bot_running = True

# –ò–º–ø–æ—Ä—Ç content_finder
try:
    from content_finder import setup_content_finder
    CONTENT_FINDER_AVAILABLE = True
except ImportError as e:
    logger.warning(f"‚ùå ContentFinder –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    CONTENT_FINDER_AVAILABLE = False

def get_current_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º"""
    return datetime.now(timezone.utc) + timedelta(hours=TIMEZONE_OFFSET)

def download_image(image_url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
    try:
        if not image_url:
            return None
            
        logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8'
        }
        
        response = requests.get(image_url, headers=headers, timeout=10)
        if response.status_code == 200:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ content-type
            content_type = response.headers.get('content-type', '')
            if 'image' in content_type:
                logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(response.content)} –±–∞–π—Ç")
                return response.content
            else:
                logger.error(f"‚ùå –ù–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {content_type}")
                return None
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def send_post_with_image(chat_id, text, image_data=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    try:
        if image_data:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            bot.send_photo(chat_id, image_data, caption=text)
            logger.info(f"‚úÖ –ü–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {chat_id}")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            bot.send_message(chat_id, text)
            logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {chat_id}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {e}")
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            bot.send_message(chat_id, text)
            logger.info(f"‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ {chat_id}")
            return True
        except Exception as e2:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e2}")
            return False

def send_formatted_message(chat_id, text):
    """–ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        bot.send_message(chat_id, text)
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

class DatabaseManager:
    def __init__(self):
        self.conn = None
        self.init_db()
    
    def get_connection(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL"""
        if self.conn is None or self.conn.closed:
            if DATABASE_URL:
                self.conn = psycopg2.connect(DATABASE_URL, sslmode='require')
            else:
                logger.error("DATABASE_URL not found")
                raise Exception("Database connection failed")
        return self.conn
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS scheduled_posts (
                    id SERIAL PRIMARY KEY,
                    message_text TEXT,
                    scheduled_time TIMESTAMP,
                    is_published BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS found_content (
                    id SERIAL PRIMARY KEY,
                    title TEXT,
                    content TEXT,
                    category VARCHAR(50),
                    url TEXT,
                    image_url TEXT,
                    is_approved BOOLEAN DEFAULT FALSE,
                    is_published BOOLEAN DEFAULT FALSE,
                    found_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_found_content_title ON found_content(title)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_found_content_found_at ON found_content(found_at)')
            
            conn.commit()
            logger.info("‚úÖ PostgreSQL database initialized with indexes")
        except Exception as e:
            logger.error(f"‚ùå Database init error: {e}")

    def save_scheduled_post(self, message_text, scheduled_time):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO scheduled_posts (message_text, scheduled_time)
                VALUES (%s, %s)
                RETURNING id
            ''', (message_text, scheduled_time))
            conn.commit()
            post_id = cursor.fetchone()[0]
            return post_id
        except Exception as e:
            logger.error(f"‚ùå Error saving post: {e}")
            raise
    
    def get_pending_posts(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, message_text, scheduled_time 
                FROM scheduled_posts 
                WHERE is_published = FALSE
                ORDER BY scheduled_time
            ''')
            posts = cursor.fetchall()
            return posts
        except Exception as e:
            logger.error(f"‚ùå Error getting posts: {e}")
            return []
    
    def mark_as_published(self, post_id):
        """–û—Ç–º–µ—á–∞–µ—Ç –ø–æ—Å—Ç –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE scheduled_posts 
                SET is_published = TRUE 
                WHERE id = %s
            ''', (post_id,))
            conn.commit()
        except Exception as e:
            logger.error(f"‚ùå Error marking post: {e}")

    def add_found_content(self, content_data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –±–∞–∑—É"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO found_content (title, content, category, url, image_url)
                VALUES (%s, %s, %s, %s, %s)
                RETURNING id
            ''', (
                content_data['title'], 
                content_data['summary'], 
                content_data['category'], 
                content_data.get('url', ''),
                content_data.get('image_url', '')
            ))
            
            conn.commit()
            content_id = cursor.fetchone()[0]
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç ID: {content_id}")
            return content_id
            
        except Exception as e:
            logger.error(f"‚ùå Error saving found content: {e}")
            raise

    def get_found_content(self, content_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ ID"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, title, content, category, is_approved, is_published, image_url
                FROM found_content 
                WHERE id = %s
            ''', (content_id,))
            result = cursor.fetchone()
            return result
        except Exception as e:
            logger.error(f"‚ùå Error getting found content: {e}")
            return None

    def is_content_exists(self, title, content):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –±–∞–∑–µ"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–æ—Å—Ç—ã –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
            cursor.execute('''
                SELECT id FROM found_content 
                WHERE title = %s OR content LIKE %s
            ''', (title, f"%{title[:50]}%"))
            
            result = cursor.fetchone()
            return result is not None
            
        except Exception as e:
            logger.error(f"‚ùå Error checking content existence: {e}")
            return False

    def get_all_content_hashes(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ—à–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –ë–î"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT title, content FROM found_content')
            existing_posts = cursor.fetchall()
            
            hashes = set()
            for title, content in existing_posts:
                text = title + content
                content_hash = hashlib.md5(text.encode()).hexdigest()
                hashes.add(content_hash)
                
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(hashes)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ö–µ—à–µ–π –∏–∑ –ë–î")
            return hashes
            
        except Exception as e:
            logger.error(f"‚ùå Error loading content hashes: {e}")
            return set()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = DatabaseManager()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ—Å—Ç–æ–≤
editing_posts = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def publish_approved_post(content_id):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –±–∞–∑—ã
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT content, image_url FROM found_content WHERE id = %s', (content_id,))
        result = cursor.fetchone()
        
        if result:
            full_post_text, image_url = result
            logger.info(f"üì§ –ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç {content_id}")
            logger.info(f"üñºÔ∏è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            image_data = None
            if image_url and image_url.startswith('http'):
                image_data = download_image(image_url)
                if image_data:
                    logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–ª—è –ø–æ—Å—Ç–∞ {content_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ {content_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")
            
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
            success = send_post_with_image(CHANNEL_ID, full_post_text, image_data)
            
            if success:
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π
                cursor.execute('UPDATE found_content SET is_published = TRUE WHERE id = %s', (content_id,))
                conn.commit()
                logger.info(f"‚úÖ –ü–æ—Å—Ç {content_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç {content_id}")
        
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {content_id}: {e}")
        return False

def publish_scheduled_posts():
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    try:
        posts = db.get_pending_posts()
        now = get_current_time()
        
        published_count = 0
        for post in posts:
            post_id, message_text, scheduled_time = post
            time_left = (scheduled_time - now).total_seconds()
            
            if time_left <= 0:
                try:
                    success = send_formatted_message(CHANNEL_ID, message_text)
                    if success:
                        db.mark_as_published(post_id)
                        published_count += 1
                        logger.info(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç ID: {post_id}")
                    time.sleep(1)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        
        if published_count > 0:
            logger.info(f"üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {published_count}")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")

def post_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤"""
    logger.info("üïí –ó–∞–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤")
    while bot_running:
        try:
            publish_scheduled_posts()
            time.sleep(30)
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            time.sleep(30)

def auto_content_scheduler():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–±–µ–∑ –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏)"""
    logger.info("‚è∞ –ó–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    def job():
        try:
            if CONTENT_FINDER_AVAILABLE and bot_running:
                logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
                
                # –°–æ–∑–¥–∞–µ–º ContentFinder —Å –ø–µ—Ä–µ–¥–∞—á–µ–π db_manager
                finder = setup_content_finder(db)
                found_content = finder.search_content(max_posts=3)
                
                if found_content:
                    new_posts_count = 0
                    for content in found_content:
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                        if not db.is_content_exists(content['title'], content['summary']):
                            content_id = db.add_found_content(content)
                            new_posts_count += 1
                            
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
                            preview = finder.format_for_preview(content)
                            
                            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                            markup = telebot.types.InlineKeyboardMarkup()
                            markup.row(
                                telebot.types.InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{content_id}"),
                                telebot.types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{content_id}"),
                                telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{content_id}")
                            )
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
                            bot.send_message(
                                ADMIN_ID,
                                preview,
                                reply_markup=markup
                            )
                            time.sleep(2)
                        else:
                            logger.info(f"üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: {content['title'][:30]}...")
                    
                    if new_posts_count > 0:
                        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {new_posts_count} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
                    else:
                        logger.info("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (—É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º)
    while bot_running:
        job()
        time.sleep(43200)  # 12 —á–∞—Å–æ–≤

def start_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤
    post_scheduler_thread = threading.Thread(target=post_scheduler, daemon=True)
    post_scheduler_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    auto_scheduler_thread = threading.Thread(target=auto_content_scheduler, daemon=True)
    auto_scheduler_thread.start()
    
    logger.info("‚úÖ –í—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã")

def safe_polling():
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global bot_running
    while bot_running:
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            bot.polling(none_stop=True, interval=1, timeout=60)
        except Exception as e:
            if not bot_running:
                break
            if "409" in str(e):
                logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç - –∂–¥—É 10 —Å–µ–∫—É–Ω–¥")
                time.sleep(10)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                time.sleep(30)

def show_admin_menu(chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    current_time = get_current_time()
    
    menu_text = f"""
ü§ñ –ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º

‚è∞ –í—Ä–µ–º—è: {current_time.strftime('%H:%M %d.%m.%Y')}

‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    markup.row(
        telebot.types.KeyboardButton('üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç'),
        telebot.types.KeyboardButton('‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç')
    )
    
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    markup.row(
        telebot.types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤'),
        telebot.types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    )
    
    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    markup.row(
        telebot.types.KeyboardButton('üîç –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç'),
        telebot.types.KeyboardButton('üì∞ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã')
    )
    
    # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    markup.row(
        telebot.types.KeyboardButton('üïí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è'),
        telebot.types.KeyboardButton('üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞')
    )
    
    # –ö–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup.row(telebot.types.KeyboardButton('üì± –°–∫—Ä—ã—Ç—å –º–µ–Ω—é'))
    
    bot.send_message(chat_id, menu_text, reply_markup=markup)

def hide_menu(chat_id):
    """–°–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é"""
    remove_markup = telebot.types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "üì± –ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é.", reply_markup=remove_markup)

# –í–°–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –ü–û–°–õ–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –í–°–ï–• –§–£–ù–ö–¶–ò–ô:

@bot.message_handler(commands=['start'])
def start_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ start"""
    if str(message.from_user.id) == ADMIN_ID:
        show_admin_menu(message.chat.id)
    else:
        response = """
üëã –ü—Ä–∏–≤–µ—Ç!

–Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞ "–°–∞–º–æ–µ –ü–µ—Ä–≤–æ–µ" üèÜ

üìå –ú—ã –ø—É–±–ª–∏–∫—É–µ–º:
‚Ä¢ –ü–µ—Ä–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è
‚Ä¢ –ú–∏—Ä–æ–≤—ã–µ —Ä–µ–∫–æ—Ä–¥—ã
‚Ä¢ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

üí° –ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ —Å–∞–º–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ!
"""
        bot.reply_to(message, response)

@bot.message_handler(func=lambda message: message.text == 'üì± –°–∫—Ä—ã—Ç—å –º–µ–Ω—é')
def hide_menu_command(message):
    """–°–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é"""
    if str(message.from_user.id) == ADMIN_ID:
        hide_menu(message.chat.id)

@bot.message_handler(func=lambda message: message.text == 'üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç')
def post_now_button(message):
    """–ö–Ω–æ–ø–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    user_states[message.chat.id] = 'waiting_post_text'
    bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")

@bot.message_handler(func=lambda message: message.text == '‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç')
def schedule_button(message):
    """–ö–Ω–æ–ø–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    user_states[message.chat.id] = 'waiting_schedule_text'
    bot.send_message(message.chat.id, "üìÖ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è):")

@bot.message_handler(func=lambda message: message.text == 'üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤')
def list_posts_button(message):
    """–ö–Ω–æ–ø–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    list_posts_command(message)

@bot.message_handler(func=lambda message: message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def stats_button(message):
    """–ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    stats_command(message)

@bot.message_handler(func=lambda message: message.text == 'üîç –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç')
def find_content_button(message):
    """–ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    find_content_command(message)

@bot.message_handler(func=lambda message: message.text == 'üì∞ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã')
def view_found_button(message):
    """–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    view_found_command(message)

@bot.message_handler(func=lambda message: message.text == 'üïí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è')
def time_button(message):
    """–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    time_command(message)

@bot.message_handler(func=lambda message: message.text == 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞')
def stop_button(message):
    """–ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    stop_command(message)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'waiting_post_text')
def handle_post_text(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        text = message.text.strip()
        if not text:
            bot.reply_to(message, "‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        
        success = send_formatted_message(CHANNEL_ID, text)
        if success:
            bot.reply_to(message, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(message.chat.id, None)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        user_states.pop(message.chat.id, None)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'waiting_schedule_text')
def handle_schedule_text(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        text = message.text.strip()
        if not text:
            bot.reply_to(message, "‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
        user_states[message.chat.id] = {'state': 'waiting_schedule_time', 'text': text}
        bot.reply_to(message, "‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-01-15 15:30")
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        user_states.pop(message.chat.id, None)

@bot.message_handler(func=lambda message: 
                    user_states.get(message.chat.id) and 
                    user_states[message.chat.id].get('state') == 'waiting_schedule_time')
def handle_schedule_time(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        user_data = user_states[message.chat.id]
        message_text = user_data['text']
        datetime_str = message.text.strip()
        
        scheduled_time = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")
        
        if scheduled_time <= get_current_time():
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è!")
            return
        
        post_id = db.save_scheduled_post(message_text, scheduled_time)
        
        bot.reply_to(message, f"‚úÖ –ü–æ—Å—Ç #{post_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time.strftime('%H:%M %d.%m.%Y')}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states.pop(message.chat.id, None)
        
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        user_states.pop(message.chat.id, None)

@bot.message_handler(commands=['stop'])
def stop_command(message):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    global bot_running
    
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    bot_running = False
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
    bot.reply_to(message, "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞
    time.sleep(2)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    exit(0)

@bot.message_handler(commands=['time'])
def time_command(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ—Ç–∞"""
    current_time = get_current_time()
    bot.reply_to(message, f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ—Ç–∞: {current_time.strftime('%H:%M:%S %d.%m.%Y')}")

@bot.message_handler(commands=['post_now'])
def post_now_command(message):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    text = message.text.replace('/post_now', '').strip()
    if not text:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post_now –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞')
        return

    try:
        success = send_formatted_message(CHANNEL_ID, text)
        if success:
            bot.reply_to(message, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['schedule'])
def schedule_command(message):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    try:
        parts = message.text.split('"')
        if len(parts) < 3:
            bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /schedule "–¢–µ–∫—Å—Ç" 2024-01-15 15:00')
            return

        message_text = parts[1]
        datetime_part = parts[2].strip().split()
        
        if len(datetime_part) < 2:
            bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
            return

        date_str, time_str = datetime_part[0], datetime_part[1]
        scheduled_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        
        if scheduled_time <= get_current_time():
            bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è!")
            return

        post_id = db.save_scheduled_post(message_text, scheduled_time)
        bot.reply_to(message, f"‚úÖ –ü–æ—Å—Ç #{post_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time.strftime('%H:%M %d.%m.%Y')}")
        
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['list_posts'])
def list_posts_command(message):
    """–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    posts = db.get_pending_posts()
    now = get_current_time()
    
    if not posts:
        bot.reply_to(message, "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        return

    response = "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n"
    for post in posts:
        post_id, text, post_time = post
        time_str = post_time.strftime('%d.%m %H:%M')
        time_left = (post_time - now).total_seconds()
        
        status = "‚úÖ –ì–û–¢–û–í" if time_left <= 0 else f"‚è≥ {int(time_left/60)} –º–∏–Ω"
        response += f"üÜî {post_id} | {status}\n"
        response += f"üìÖ {time_str}\n"
        response += f"üìù {text[:50]}...\n"
        response += "‚îÄ" * 30 + "\n"

    bot.reply_to(message, response)

@bot.message_handler(commands=['stats'])
def stats_command(message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    try:
        current_time = get_current_time()
        
        posts = db.get_pending_posts()
        pending_count = len(posts)
        
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM scheduled_posts WHERE is_published = TRUE')
        published_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM found_content WHERE is_published = TRUE')
        auto_published_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM found_content')
        total_found_count = cursor.fetchone()[0]
        
        stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ PostgreSQL
üìä –ü—É–±–ª–∏–∫–∞—Ü–∏–∏:
‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤—Ä—É—á–Ω—É—é: {published_count}
ü§ñ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∞–≤—Ç–æ: {auto_published_count}
‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_count}

üìã –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:
üì• –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {total_found_count}
‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {auto_published_count}

‚è∞ –í—Ä–µ–º—è: {current_time.strftime('%H:%M %d.%m.%Y')}

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ! üöÄ
"""
        bot.reply_to(message, stats_text)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@bot.message_handler(commands=['find_content'])
def find_content_command(message):
    """–†—É—á–Ω–æ–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    if not CONTENT_FINDER_AVAILABLE:
        bot.reply_to(message, "‚ùå –ú–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    try:
        bot.reply_to(message, "üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º db_manager –≤ content_finder –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        finder = setup_content_finder(db)
        found_content = finder.search_content(max_posts=2)
        
        if found_content:
            new_posts_count = 0
            for content in found_content:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                if not db.is_content_exists(content['title'], content['summary']):
                    content_id = db.add_found_content(content)
                    new_posts_count += 1
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
                    preview = finder.format_for_preview(content)
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    markup = telebot.types.InlineKeyboardMarkup()
                    markup.row(
                        telebot.types.InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{content_id}"),
                        telebot.types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{content_id}"),
                        telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{content_id}")
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    bot.send_message(
                        message.chat.id, 
                        preview, 
                        reply_markup=markup
                    )
                    time.sleep(1)
                else:
                    logger.info(f"üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: {content['title'][:30]}...")
            
            if new_posts_count > 0:
                bot.reply_to(message, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {new_posts_count} –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—ã—à–µ!")
            else:
                bot.reply_to(message, "‚ùå –ù–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—Å–µ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.")
        else:
            bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

@bot.message_handler(commands=['view_found'])
def view_found_command(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    try:
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT id, title, content, category, is_approved, is_published
            FROM found_content 
            ORDER BY found_at DESC 
            LIMIT 10
        ''')
        posts = cursor.fetchall()
        
        if not posts:
            bot.reply_to(message, "üì≠ –ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            return
        
        response = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n"
        for post in posts:
            post_id, title, content, category, approved, published = post
            
            status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if approved else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
            status += " üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" if published else ""
            
            response += f"üÜî {post_id} | {status}\n"
            response += f"üìÅ {category}\n"
            response += f"üìù {title[:50]}...\n"
            response += "‚îÄ" * 30 + "\n"
        
        bot.reply_to(message, response)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤: {e}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    try:
        if call.data.startswith('approve_'):
            content_id = int(call.data.split('_')[1])
            bot.answer_callback_query(call.id, "üì§ –ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –±–∞–∑—ã
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT content, image_url FROM found_content WHERE id = %s', (content_id,))
            result = cursor.fetchone()
            
            if result:
                full_post_text, image_url = result
                
                # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
                success = publish_approved_post(content_id)
                
                if success:
                    final_text = "‚úÖ –ü–û–°–¢ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù –í –ö–ê–ù–ê–õ–ï! üì¢"
                    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π
                    cursor.execute('UPDATE found_content SET is_approved = TRUE WHERE id = %s', (content_id,))
                    conn.commit()
                else:
                    final_text = "‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"
                
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=final_text
                )
            
        elif call.data.startswith('reject_'):
            content_id = int(call.data.split('_')[1])
            bot.answer_callback_query(call.id, "‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            
            # –ü—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute('DELETE FROM found_content WHERE id = %s', (content_id,))
            conn.commit()
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω"
            )
            
        elif call.data.startswith('edit_'):
            content_id = int(call.data.split('_')[1])
            bot.answer_callback_query(call.id, "‚úèÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT content FROM found_content WHERE id = %s', (content_id,))
            result = cursor.fetchone()
            
            if result:
                full_post_text = result[0]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                editing_posts[call.message.chat.id] = content_id
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                edit_message = f"""‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–°–¢–ê #{content_id}

–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:
{full_post_text}

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:"""
                
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                
                bot.send_message(
                    call.message.chat.id,
                    edit_message
                )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

@bot.message_handler(func=lambda message: message.chat.id in editing_posts)
def handle_edit_text(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
    try:
        content_id = editing_posts.pop(message.chat.id, None)
        if not content_id:
            return
            
        new_content = message.text.strip()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE found_content 
            SET content = %s 
            WHERE id = %s
        ''', (new_content, content_id))
        conn.commit()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        updated_preview = f"""‚úèÔ∏è –¢–ï–ö–°–¢ –û–ë–ù–û–í–õ–ï–ù

{new_content}

‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ–¥–æ–±—Ä–∏—Ç—å –ø–æ—Å—Ç."""
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        markup = telebot.types.InlineKeyboardMarkup()
        markup.row(
            telebot.types.InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{content_id}"),
            telebot.types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{content_id}"),
            telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{content_id}")
        )
        
        bot.send_message(
            message.chat.id,
            updated_preview,
            reply_markup=markup
        )
        
        logger.info(f"‚úèÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç {content_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global bot_running
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    if not all([BOT_TOKEN, CHANNEL_ID, ADMIN_ID]):
        logger.error("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
    start_scheduler()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    safe_polling()

if __name__ == '__main__':
    main()
