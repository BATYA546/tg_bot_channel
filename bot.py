import os
import logging
import threading
import time
import re
from datetime import datetime, timedelta
import telebot
from dotenv import load_dotenv
import psycopg2
from psycopg2.extras import RealDictCursor
from content_finder import setup_content_finder
# –í –∏–º–ø–æ—Ä—Ç—ã –¥–æ–±–∞–≤–ª—è–µ–º:
try:
    from content_finder import setup_content_finder
    CONTENT_FINDER_AVAILABLE = True
except ImportError as e:
    logger.warning(f"‚ùå ContentFinder –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    CONTENT_FINDER_AVAILABLE = False

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
ADMIN_ID = os.getenv('ADMIN_ID')
DATABASE_URL = os.getenv('DATABASE_URL')

bot = telebot.TeleBot(BOT_TOKEN)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã)
TIMEZONE_OFFSET = 3

def get_current_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –ø–æ–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"""
    return datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)

class DatabaseManager:
    def __init__(self):
        self.conn = None
        self.init_db()
    
    def get_connection(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL"""
        if self.conn is None or self.conn.closed:
            if DATABASE_URL:
                self.conn = psycopg2.connect(DATABASE_URL, sslmode='require')
            else:
                logger.error("DATABASE_URL not found")
                raise Exception("Database connection failed")
        return self.conn
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS scheduled_posts (
                    id SERIAL PRIMARY KEY,
                    message_text TEXT,
                    scheduled_time TIMESTAMP,
                    is_published BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS found_content (
                    id SERIAL PRIMARY KEY,
                    title TEXT,
                    content TEXT,
                    category VARCHAR(50),
                    url TEXT,
                    image_url TEXT,
                    is_approved BOOLEAN DEFAULT FALSE,
                    is_published BOOLEAN DEFAULT FALSE,
                    found_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            logger.info("‚úÖ PostgreSQL database initialized")
        except Exception as e:
            logger.error(f"‚ùå Database init error: {e}")

    def save_scheduled_post(self, message_text, scheduled_time):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO scheduled_posts (message_text, scheduled_time)
                VALUES (%s, %s)
                RETURNING id
            ''', (message_text, scheduled_time))
            conn.commit()
            post_id = cursor.fetchone()[0]
            return post_id
        except Exception as e:
            logger.error(f"‚ùå Error saving post: {e}")
            raise
    
    def get_pending_posts(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, message_text, scheduled_time 
                FROM scheduled_posts 
                WHERE is_published = FALSE
                ORDER BY scheduled_time
            ''')
            posts = cursor.fetchall()
            return posts
        except Exception as e:
            logger.error(f"‚ùå Error getting posts: {e}")
            return []
    
    def mark_as_published(self, post_id):
        """–û—Ç–º–µ—á–∞–µ—Ç –ø–æ—Å—Ç –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE scheduled_posts 
                SET is_published = TRUE 
                WHERE id = %s
            ''', (post_id,))
            conn.commit()
        except Exception as e:
            logger.error(f"‚ùå Error marking post: {e}")

    # –î–û–ë–ê–í–õ–Ø–ï–ú –≠–¢–û–¢ –ú–ï–¢–û–î - –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    def add_found_content(self, content_data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –±–∞–∑—É"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO found_content (title, content, category, url)
                VALUES (%s, %s, %s, %s)
                RETURNING id
            ''', (
                content_data['title'], 
                content_data['summary'], 
                content_data['category'], 
                content_data.get('url', '')
            ))
            
            conn.commit()
            content_id = cursor.fetchone()[0]
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç ID: {content_id}")
            return content_id
            
        except Exception as e:
            logger.error(f"‚ùå Error saving found content: {e}")
            raise

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ ID
    def get_found_content(self, content_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ ID"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, title, content, category, is_approved, is_published
                FROM found_content 
                WHERE id = %s
            ''', (content_id,))
            result = cursor.fetchone()
            return result
        except Exception as e:
            logger.error(f"‚ùå Error getting found content: {e}")
            return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = DatabaseManager()

# –í –∫–ª–∞—Å—Å DatabaseManager –¥–æ–±–∞–≤–ª—è–µ–º:
def add_found_content(self, content_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –±–∞–∑—É"""
    try:
        conn = self.get_connection()
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS found_content (
                id SERIAL PRIMARY KEY,
                title TEXT,
                content TEXT,
                category VARCHAR(50),
                source VARCHAR(100),
                url TEXT,
                image_url TEXT,
                is_approved BOOLEAN DEFAULT FALSE,
                is_published BOOLEAN DEFAULT FALSE,
                found_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            INSERT INTO found_content (title, content, category, source, url)
            VALUES (%s, %s, %s, %s, %s)
            RETURNING id
        ''', (content_data['title'], content_data['summary'], 
              content_data['category'], content_data['source'], 
              content_data['url']))
        
        conn.commit()
        content_id = cursor.fetchone()[0]
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç ID: {content_id}")
        return content_id
        
    except Exception as e:
        logger.error(f"‚ùå Error saving found content: {e}")
        raise

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@bot.message_handler(commands=['find_content'])
def find_content_command(message):
    """–†—É—á–Ω–æ–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    if not CONTENT_FINDER_AVAILABLE:
        bot.reply_to(message, "‚ùå –ú–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    try:
        bot.reply_to(message, "üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        finder = setup_content_finder()
        found_content = finder.search_content(max_posts=3)
        
        if found_content:
            for content in found_content:
                content_id = db.add_found_content(content)
                
                preview = finder.format_for_preview(content)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                markup = telebot.types.InlineKeyboardMarkup()
                markup.row(
                    telebot.types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{content_id}"),
                    telebot.types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{content_id}"),
                    telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{content_id}")
                )
                
                bot.send_message(
                    message.chat.id, 
                    preview, 
                    parse_mode='Markdown',
                    reply_markup=markup
                )
            
            bot.reply_to(message, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_content)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—ã—à–µ!")
        else:
            bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

def create_moderation_keyboard(content_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    markup = telebot.types.InlineKeyboardMarkup()
    markup.row(
        telebot.types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{content_id}"),
        telebot.types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{content_id}"),
        telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{content_id}")
    )
    return markup

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = DatabaseManager()

def send_formatted_message(chat_id, text):
    """–£–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    # –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = text.replace('\\n', '\n')
    
    try:
        # –ü—Ä–æ–±—É–µ–º Markdown
        bot.send_message(chat_id, text, parse_mode='Markdown')
        return True
    except:
        try:
            # –ü—Ä–æ–±—É–µ–º HTML
            html_text = text
            html_text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', html_text)
            html_text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', html_text)
            html_text = re.sub(r'__(.*?)__', r'<u>\1</u>', html_text)
            bot.send_message(chat_id, html_text, parse_mode='HTML')
            return True
        except:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            bot.send_message(chat_id, text, parse_mode=None)
            return True

def publish_scheduled_posts():
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    try:
        posts = db.get_pending_posts()
        now = get_current_time()
        
        published_count = 0
        for post in posts:
            post_id, message_text, scheduled_time = post
            time_left = (scheduled_time - now).total_seconds()
            
            if time_left <= 0:
                try:
                    success = send_formatted_message(CHANNEL_ID, message_text)
                    if success:
                        db.mark_as_published(post_id)
                        published_count += 1
                        logger.info(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç ID: {post_id}")
                    time.sleep(1)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        
        if published_count > 0:
            logger.info(f"üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {published_count}")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")

def post_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤"""
    logger.info("üïí –ó–∞–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤")
    while True:
        try:
            publish_scheduled_posts()
            time.sleep(30)
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            time.sleep(30)

def safe_polling():
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    while True:
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            bot.polling(none_stop=True, interval=1, timeout=60)
        except Exception as e:
            if "409" in str(e):
                logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç - –∂–¥—É 10 —Å–µ–∫—É–Ω–¥")
                time.sleep(10)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                time.sleep(30)

@bot.message_handler(commands=['start'])
def start_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ start"""
    if str(message.from_user.id) == ADMIN_ID:
        current_time = get_current_time()
        response = f"""
ü§ñ <b>–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º</b>

‚è∞ –í—Ä–µ–º—è: {current_time.strftime('%H:%M %d.%m.%Y')}

‚öôÔ∏è <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/post_now - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç
/schedule - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç  
/list_posts - —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üìù <b>–ü—Ä–∏–º–µ—Ä:</b>
/schedule "<b>–í–∞–∂–Ω–æ</b> —Å–æ–æ–±—â–µ–Ω–∏–µ" 2024-01-15 15:30
"""
        bot.reply_to(message, response, parse_mode='HTML')
    else:
        response = """
üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>

–Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞ <b>"–°–∞–º–æ–µ –ü–µ—Ä–≤–æ–µ"</b> üèÜ

üìå <b>–ú—ã –ø—É–±–ª–∏–∫—É–µ–º:</b>
‚Ä¢ –ü–µ—Ä–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è
‚Ä¢ –ú–∏—Ä–æ–≤—ã–µ —Ä–µ–∫–æ—Ä–¥—ã
‚Ä¢ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

üí° <b>–ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ —Å–∞–º–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ!</b>
"""
        bot.reply_to(message, response, parse_mode='HTML')

@bot.message_handler(commands=['post_now'])
def post_now_command(message):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    text = message.text.replace('/post_now', '').strip()
    if not text:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post_now –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞')
        return

    try:
        success = send_formatted_message(CHANNEL_ID, text)
        if success:
            bot.reply_to(message, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['schedule'])
def schedule_command(message):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    try:
        parts = message.text.split('"')
        if len(parts) < 3:
            bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /schedule "–¢–µ–∫—Å—Ç" 2024-01-15 15:00')
            return

        message_text = parts[1]
        datetime_part = parts[2].strip().split()
        
        if len(datetime_part) < 2:
            bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
            return

        date_str, time_str = datetime_part[0], datetime_part[1]
        scheduled_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        
        if scheduled_time <= get_current_time():
            bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è!")
            return

        post_id = db.save_scheduled_post(message_text, scheduled_time)
        bot.reply_to(message, f"‚úÖ –ü–æ—Å—Ç #{post_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time.strftime('%H:%M %d.%m.%Y')}")
        
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['list_posts'])
def list_posts_command(message):
    """–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    posts = db.get_pending_posts()
    now = get_current_time()
    
    if not posts:
        bot.reply_to(message, "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        return

    response = "üìÖ *–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:*\n\n"
    for post in posts:
        post_id, text, post_time = post
        time_str = post_time.strftime('%d.%m %H:%M')
        time_left = (post_time - now).total_seconds()
        
        status = "‚úÖ –ì–û–¢–û–í" if time_left <= 0 else f"‚è≥ {int(time_left/60)} –º–∏–Ω"
        response += f"üÜî {post_id} | {status}\n"
        response += f"üìÖ {time_str}\n"
        response += f"üìù {text[:50]}...\n"
        response += "‚îÄ" * 30 + "\n"

    bot.reply_to(message, response, parse_mode='Markdown')

@bot.message_handler(commands=['stats'])
def stats_command(message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    try:
        current_time = get_current_time()
        
        posts = db.get_pending_posts()
        pending_count = len(posts)
        
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM scheduled_posts WHERE is_published = TRUE')
        published_count = cursor.fetchone()[0]
        
        stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*

üóÉÔ∏è *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:* ‚úÖ PostgreSQL
üìä *–ü—É–±–ª–∏–∫–∞—Ü–∏–∏:*
‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count}
‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_count}

‚è∞ *–í—Ä–µ–º—è:* {current_time.strftime('%H:%M %d.%m.%Y')}

*–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ!* üöÄ
"""
        bot.reply_to(message, stats_text, parse_mode='Markdown')
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –≤ bot.py –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ—Å—Ç–æ–≤
editing_posts = {}

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    try:
        if call.data.startswith('approve_'):
            content_id = int(call.data.split('_')[1])
            bot.answer_callback_query(call.id, "‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω!")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT title, content FROM found_content WHERE id = %s', (content_id,))
            result = cursor.fetchone()
            
            if result:
                title, full_text = result
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                final_text = f"""
‚úÖ *–ö–û–ù–¢–ï–ù–¢ –û–î–û–ë–†–ï–ù*

*–ó–∞–≥–æ–ª–æ–≤–æ–∫:* {title}

*–¢–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:*
{full_text}

üìÖ –ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
                """
                
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=final_text,
                    parse_mode='Markdown'
                )
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç {content_id} –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            
        elif call.data.startswith('reject_'):
            content_id = int(call.data.split('_')[1])
            bot.answer_callback_query(call.id, "‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå *–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω*",
                parse_mode='Markdown'
            )
            
            logger.info(f"‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç {content_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            
        elif call.data.startswith('edit_'):
            content_id = int(call.data.split('_')[1])
            bot.answer_callback_query(call.id, "‚úèÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT title, content FROM found_content WHERE id = %s', (content_id,))
            result = cursor.fetchone()
            
            if result:
                title, full_text = result
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                editing_posts[call.message.chat.id] = content_id
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                edit_message = f"""
‚úèÔ∏è *–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–°–¢–ê #{content_id}*

*–¢–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:*
{title}

*–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:*
{full_text}

üìù *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:*
–ó–∞–≥–æ–ª–æ–≤–æ–∫
(–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞

*–ü—Ä–∏–º–µ—Ä:*
–£—á–µ–Ω—ã–µ —Å–æ–∑–¥–∞–ª–∏ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
(–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –±—É–¥—É—â–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –≠—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
                """
                
                # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‚úèÔ∏è *–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*",
                    parse_mode='Markdown'
                )
                
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                bot.send_message(
                    call.message.chat.id,
                    edit_message,
                    parse_mode='Markdown'
                )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.chat.id in editing_posts)
def handle_edit_text(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
    try:
        content_id = editing_posts.pop(message.chat.id, None)
        if not content_id:
            return
            
        text = message.text.strip()
        
        # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (—Ä–∞–∑–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç)
        parts = text.split('\n\n', 1)
        if len(parts) == 2:
            new_title, new_content = parts[0].strip(), parts[1].strip()
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            lines = text.split('\n')
            new_title = lines[0].strip()
            new_content = '\n'.join(lines[1:]).strip() if len(lines) > 1 else new_title
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE found_content 
            SET title = %s, content = %s 
            WHERE id = %s
        ''', (new_title, new_content, content_id))
        conn.commit()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        updated_preview = f"""
‚úèÔ∏è *–¢–ï–ö–°–¢ –û–ë–ù–û–í–õ–ï–ù*

*–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:*
{new_title}

*–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:*
{new_content}

‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ–¥–æ–±—Ä–∏—Ç—å –ø–æ—Å—Ç.
        """
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        markup = telebot.types.InlineKeyboardMarkup()
        markup.row(
            telebot.types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{content_id}"),
            telebot.types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{content_id}"),
            telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{content_id}")
        )
        
        bot.send_message(
            message.chat.id,
            updated_preview,
            parse_mode='Markdown',
            reply_markup=markup
        )
        
        logger.info(f"‚úèÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç {content_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
@bot.message_handler(commands=['view_found'])
def view_found_command(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    try:
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT id, title, content, category, is_approved, is_published
            FROM found_content 
            ORDER BY found_at DESC 
            LIMIT 10
        ''')
        posts = cursor.fetchall()
        
        if not posts:
            bot.reply_to(message, "üì≠ –ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            return
        
        response = "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:*\n\n"
        for post in posts:
            post_id, title, content, category, approved, published = post
            
            status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if approved else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
            status += " üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" if published else ""
            
            response += f"üÜî {post_id} | {status}\n"
            response += f"üìÅ {category}\n"
            response += f"üìù {title[:50]}...\n"
            response += "‚îÄ" * 30 + "\n"
        
        bot.reply_to(message, response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤: {e}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –≤—Å–µ—Ö message_handler
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    try:
        if call.data.startswith('approve_'):
            content_id = int(call.data.split('_')[1])
            bot.answer_callback_query(call.id, "‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"‚úÖ *–ö–æ–Ω—Ç–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω!*\n\n–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                parse_mode='Markdown'
            )
            
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç {content_id} –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            
        elif call.data.startswith('reject_'):
            content_id = int(call.data.split('_')[1])
            bot.answer_callback_query(call.id, "‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå *–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω*",
                parse_mode='Markdown'
            )
            
            logger.info(f"‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç {content_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            
        elif call.data.startswith('edit_'):
            content_id = int(call.data.split('_')[1])
            bot.answer_callback_query(call.id, "‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            bot.send_message(
                call.message.chat.id,
                f"‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ #{content_id}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:"
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    if not all([BOT_TOKEN, CHANNEL_ID, ADMIN_ID]):
        logger.error("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler_thread = threading.Thread(target=post_scheduler, daemon=True)
    scheduler_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    safe_polling()

if __name__ == '__main__':
    main()









