import os
import logging
import sqlite3
import threading
import time
import random
import requests
import re
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
import telebot
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
ADMIN_ID = os.getenv('ADMIN_ID')

bot = telebot.TeleBot(BOT_TOKEN)

# SQLite –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
def adapt_datetime(dt):
    return dt.isoformat()

def convert_datetime(text):
    return datetime.fromisoformat(text.decode())

sqlite3.register_adapter(datetime, adapt_datetime)
sqlite3.register_converter("DATETIME", convert_datetime)

class DatabaseManager:
    def __init__(self):
        self.init_db()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect('posts.db', detect_types=sqlite3.PARSE_DECLTYPES)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS scheduled_posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                message_text TEXT,
                scheduled_time DATETIME,
                is_published BOOLEAN DEFAULT FALSE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()
        logger.info("Database initialized successfully")

    def save_scheduled_post(self, message_text, scheduled_time):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect('posts.db', detect_types=sqlite3.PARSE_DECLTYPES)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO scheduled_posts (message_text, scheduled_time)
            VALUES (?, ?)
        ''', (message_text, scheduled_time))
        conn.commit()
        post_id = cursor.lastrowid
        conn.close()
        return post_id
    
    def get_pending_posts(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        try:
            conn = sqlite3.connect('posts.db', detect_types=sqlite3.PARSE_DECLTYPES)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, message_text, scheduled_time 
                FROM scheduled_posts 
                WHERE is_published = FALSE
                ORDER BY scheduled_time
            ''')
            posts = cursor.fetchall()
            conn.close()
        
            # –í–û–¢ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–¥–µ—Å—å
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–µ–ª–∞–µ–º –≤ publish_scheduled_posts
            return posts
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
            return []
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
            return []

    @bot.message_handler(commands=['debug_posts'])
    def debug_posts_command(message):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞—Ö"""
        if str(message.from_user.id) != ADMIN_ID:
            bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
            return

        try:
            conn = sqlite3.connect('posts.db', detect_types=sqlite3.PARSE_DECLTYPES)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, message_text, scheduled_time, is_published, created_at
                FROM scheduled_posts 
                ORDER BY scheduled_time
            ''')
            all_posts = cursor.fetchall()
            conn.close()
        
            now = datetime.now()
            response = f"üêõ –û–¢–õ–ê–î–ö–ê –ü–û–°–¢–û–í (–≤—Å–µ–≥–æ: {len(all_posts)})\n"
            response += f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        
            for post in all_posts:
                post_id, text, post_time, is_published, created_at = post
                time_str = post_time.strftime('%Y-%m-%d %H:%M:%S')
                time_left = (post_time - now).total_seconds()
            
                status = "‚úÖ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù" if is_published else f"‚è≥ –û–∂–∏–¥–∞–µ—Ç ({int(time_left)} —Å–µ–∫)"
                response += f"üÜî {post_id} | {status}\n"
                response += f"üìÖ {time_str}\n"
                response += f"üìù {text[:30]}...\n"
                response += "‚îÄ" * 40 + "\n"
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            publish_scheduled_posts()
        
            bot.reply_to(message, response)
        
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
    
    def mark_as_published(self, post_id):
        """–û—Ç–º–µ—á–∞–µ—Ç –ø–æ—Å—Ç –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π"""
        conn = sqlite3.connect('posts.db', detect_types=sqlite3.PARSE_DECLTYPES)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE scheduled_posts 
            SET is_published = TRUE 
            WHERE id = ?
        ''', (post_id,))
        conn.commit()
        conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = DatabaseManager()

def publish_scheduled_posts():
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    try:
        posts = db.get_pending_posts()
        now = datetime.now()
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–æ–≤... –ù–∞–π–¥–µ–Ω–æ: {len(posts)}")
        
        published_count = 0
        for post in posts:
            post_id, message_text, scheduled_time = post
            
            time_left = (scheduled_time - now).total_seconds()
            logger.info(f"üìã –ü–æ—Å—Ç {post_id}: –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time}, –æ—Å—Ç–∞–ª–æ—Å—å {time_left:.0f} —Å–µ–∫")
            
            # –ü—É–±–ª–∏–∫—É–µ–º –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ò–õ–ò –ø—Ä–æ—à–ª–æ
            if time_left <= 0:
                try:
                    logger.info(f"üöÄ –ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç {post_id}: {message_text[:50]}...")
                    bot.send_message(CHANNEL_ID, message_text)
                    db.mark_as_published(post_id)
                    published_count += 1
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç ID: {post_id}")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
                    time.sleep(1)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_id}: {e}")
        
        if published_count > 0:
            logger.info(f"üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {published_count} –ø–æ—Å—Ç–æ–≤")
        else:
            logger.info("‚è≥ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ publish_scheduled_posts: {e}")

def post_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤"""
    logger.info("üïí –ó–∞–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤...")
    
    while True:
        try:
            publish_scheduled_posts()
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            time.sleep(30)

@bot.message_handler(commands=['start'])
def start_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ start"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    bot.reply_to(message,
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º –∑–∞–ø—É—â–µ–Ω!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/post_now —Ç–µ–∫—Å—Ç - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
        "/schedule \"—Ç–µ–∫—Å—Ç\" 2024-01-15 15:00 - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å\n"
        "/list_posts - —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/post_now –ü—Ä–∏–≤–µ—Ç –º–∏—Ä!\n"
        '/schedule "–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" 2024-01-15 15:30'
    )

@bot.message_handler(commands=['post_now'])
def post_now_command(message):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    text = message.text.replace('/post_now', '').strip()
    
    if not text:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post_now –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞')
        return

    try:
        bot.send_message(CHANNEL_ID, text)
        bot.reply_to(message, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!")
        logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç: {text[:50]}...")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ post_now: {e}")

@bot.message_handler(commands=['schedule'])
def schedule_command(message):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    full_text = message.text.strip()
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {full_text}")
    
    if len(full_text) <= len('/schedule'):
        bot.reply_to(message, 
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /schedule "–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞" –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n\n'
            '–ü—Ä–∏–º–µ—Ä—ã:\n'
            '/schedule "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä" 2024-01-15 15:30\n'
            '/schedule "–í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" 2024-01-15 16:00'
        )
        return

    try:
        command_rest = full_text[len('/schedule'):].strip()
        
        if command_rest.startswith('"'):
            parts = command_rest.split('"', 2)
            if len(parts) < 3:
                bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: /schedule \"–¢–µ–∫—Å—Ç\" –¥–∞—Ç–∞ –≤—Ä–µ–º—è")
                return
                
            message_text = parts[1].strip()
            datetime_part = parts[2].strip()
        else:
            parts = command_rest.split()
            if len(parts) < 3:
                bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç, –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è")
                return
                
            message_text = ' '.join(parts[:-2])
            datetime_part = ' '.join(parts[-2:])

        if not message_text:
            bot.reply_to(message, "‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return

        datetime_parts = datetime_part.split()
        if len(datetime_parts) < 2:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ò –≤—Ä–µ–º—è: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
            return

        date_str = datetime_parts[0]
        time_str = datetime_parts[1]

        scheduled_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        now = datetime.now()
        
        time_diff = (scheduled_time - now).total_seconds()
        logger.info(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: {scheduled_time}, —á–µ—Ä–µ–∑ {time_diff:.0f} —Å–µ–∫")
        
        if time_diff <= 0:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è!")
            return

        post_id = db.save_scheduled_post(message_text, scheduled_time)
        
        bot.reply_to(message, 
            f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!\n"
            f"üÜî ID: {post_id}\n"
            f"üìÖ –ö–æ–≥–¥–∞: {scheduled_time.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            f"üìù –¢–µ–∫—Å—Ç: {message_text[:80]}...\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug_posts –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"
        )
        logger.info(f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–æ—Å—Ç ID: {post_id} –Ω–∞ {scheduled_time}")
        
    except ValueError as e:
        error_msg = f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: 2024-01-15 15:30"
        bot.reply_to(message, error_msg)
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {e}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ schedule_command: {e}")

@bot.message_handler(commands=['list_posts'])
def list_posts_command(message):
    """–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    posts = db.get_pending_posts()
    
    if not posts:
        bot.reply_to(message, "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        return

    response = "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n"
    for post in posts:
        post_id, text, post_time = post
        time_str = post_time.strftime('%d.%m.%Y %H:%M')
        time_left = (post_time - datetime.now()).total_seconds()
        
        status = "‚úÖ –ì–û–¢–û–í" if time_left <= 0 else f"‚è≥ {int(time_left/60)} –º–∏–Ω"
        response += f"üÜî {post_id} | {status}\n"
        response += f"üìÖ {time_str}\n"
        response += f"üìù {text[:60]}...\n"
        response += "‚îÄ" * 40 + "\n"

    bot.reply_to(message, response)

@bot.message_handler(commands=['help'])
def help_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    bot.reply_to(message,
        "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/post_now [—Ç–µ–∫—Å—Ç] - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç —Å–µ–π—á–∞—Å\n"
        "/schedule [—Ç–µ–∫—Å—Ç] [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è] - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç\n"
        "/list_posts - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
        "–ü—Ä–∏–º–µ—Ä: /schedule \"–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\" 2024-01-15 17:00"
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not all([BOT_TOKEN, CHANNEL_ID, ADMIN_ID]):
        logger.error("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        logger.error(f"BOT_TOKEN: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
        logger.error(f"CHANNEL_ID: {'‚úÖ' if CHANNEL_ID else '‚ùå'}")
        logger.error(f"ADMIN_ID: {'‚úÖ' if ADMIN_ID else '‚ùå'}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler_thread = threading.Thread(target=post_scheduler, daemon=True)
    scheduler_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ Telegram")
    try:
        bot.polling(none_stop=True, interval=1)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()


