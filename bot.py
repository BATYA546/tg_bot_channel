import os
import logging
import psycopg2
from psycopg2.extras import RealDictCursor
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, ChatMemberHandler
from telegram.constants import ParseMode
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = int(os.getenv('CHANNEL_ID'))
ADMIN_ID = int(os.getenv('ADMIN_ID'))
DATABASE_URL = os.getenv('DATABASE_URL')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([BOT_TOKEN, CHANNEL_ID, ADMIN_ID]):
    raise ValueError("Missing required environment variables!")

class DatabaseManager:
    def __init__(self):
        self.conn = None
        self.init_db()
    
    def get_connection(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL"""
        if self.conn is None or self.conn.closed:
            if DATABASE_URL:
                # –î–ª—è Railway PostgreSQL
                self.conn = psycopg2.connect(DATABASE_URL, sslmode='require')
            else:
                # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                self.conn = psycopg2.connect(
                    host='localhost',
                    database='telegram_bot',
                    user='postgres',
                    password='password'
                )
        return self.conn
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS scheduled_posts (
                    id SERIAL PRIMARY KEY,
                    message_text TEXT,
                    image_url TEXT,
                    scheduled_time TIMESTAMP,
                    is_published BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            conn.commit()
            logger.info("Database initialized successfully")
        except Exception as e:
            logger.error(f"Error initializing database: {e}")
            raise

    def save_scheduled_post(self, message_text, image_url, scheduled_time):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO scheduled_posts (message_text, image_url, scheduled_time)
                VALUES (%s, %s, %s)
                RETURNING id
            ''', (message_text, image_url, scheduled_time))
            conn.commit()
            post_id = cursor.fetchone()[0]
            return post_id
        except Exception as e:
            logger.error(f"Error saving post: {e}")
            raise
    
    def get_pending_posts(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor(cursor_factory=RealDictCursor)
            cursor.execute('''
                SELECT id, message_text, image_url, scheduled_time 
                FROM scheduled_posts 
                WHERE is_published = FALSE AND scheduled_time > %s
                ORDER BY scheduled_time
            ''', (datetime.now(),))
            posts = cursor.fetchall()
            return posts
        except Exception as e:
            logger.error(f"Error getting pending posts: {e}")
            return []
    
    def mark_as_published(self, post_id):
        """–û—Ç–º–µ—á–∞–µ—Ç –ø–æ—Å—Ç –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE scheduled_posts 
                SET is_published = TRUE 
                WHERE id = %s
            ''', (post_id,))
            conn.commit()
        except Exception as e:
            logger.error(f"Error marking post as published: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
db = DatabaseManager()

async def welcome_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ."""
    try:
        if update.chat_member is None:
            return

        new_status = update.chat_member.new_chat_member.status
        old_status = update.chat_member.old_chat_member.status

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
        if (old_status == 'left' and new_status in ['member', 'administrator', 'creator']):
            user = update.chat_member.new_chat_member.user
            chat_id = update.chat_member.chat.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –∫–∞–Ω–∞–ª
            if chat_id == CHANNEL_ID:
                welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞–Ω–∞–ª, [{user.first_name}](tg://user?id={user.id})!

–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å! –û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º –ø–æ—Å—Ç–æ–º, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏.

–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã! ü§ñ
                """
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=welcome_text,
                    parse_mode=ParseMode.MARKDOWN,
                    disable_web_page_preview=True
                )
                logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name}")
    except Exception as e:
        logger.error(f"Error in welcome_new_member: {e}")

async def publish_scheduled_post(context: ContextTypes.DEFAULT_TYPE):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç."""
    try:
        job = context.job
        post_data = job.data
        post_id = post_data['post_id']

        if post_data.get('image_url') and post_data['image_url'] != 'None':
            await context.bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=post_data['image_url'],
                caption=post_data['message_text'],
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await context.bot.send_message(
                chat_id=CHANNEL_ID,
                text=post_data['message_text'],
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True
            )
        
        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π
        db.mark_as_published(post_id)
        logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç ID: {post_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")

schedule_post

async def post_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞."""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    full_text = update.message.text
    logger.info(f"Received command: {full_text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if not full_text or len(full_text.strip()) <= len('/post_now'):
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post_now \"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞\"\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            '/post_now "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç!"'
        )
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (–≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ /post_now)
    command_parts = full_text.split(' ', 1)
    if len(command_parts) < 2:
        await update.message.reply_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞!")
        return

    message_text = command_parts[1].strip()
    
    # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if message_text.startswith('"') and message_text.endswith('"'):
        message_text = message_text[1:-1]
    elif message_text.startswith('"') and message_text.endswith('"'):
        message_text = message_text[1:-1]

    if not message_text:
        await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    logger.info(f"Publishing post: {message_text}")

    try:
        # –ü—É–±–ª–∏–∫—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=message_text,
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True
        )
        
        await update.message.reply_text("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!")
        logger.info(f"–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {message_text[:50]}...")

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}"
        await update.message.reply_text(error_msg)
        logger.error(f"Error in post_now: {e}")

async def list_posts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã."""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    posts = db.get_pending_posts()
    
    if not posts:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
        return

    message = "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n"
    for post in posts:
        message += f"üÜî {post['id']}\n"
        message += f"üìÖ {post['scheduled_time'].strftime('%d.%m.%Y %H:%M')}\n"
        message += f"üìù {post['message_text'][:50]}...\n"
        message += f"üñºÔ∏è {'–î–∞' if post['image_url'] else '–ù–µ—Ç'}\n"
        message += "‚îÄ" * 30 + "\n"

    await update.message.reply_text(message)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ start"""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º –∑–∞–ø—É—â–µ–Ω!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/schedule - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç\n"
        "/post_now - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
        "/list_posts - —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        '/schedule "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä" none 2024-01-15 14:30\n'
        '/post_now "–°—Ä–æ—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å"'
    )

async def load_scheduled_posts(application: Application):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    try:
        posts = db.get_pending_posts()
        loaded_count = 0
        
        for post in posts:
            scheduled_time = post['scheduled_time']
            time_delta = scheduled_time - datetime.now()
            seconds_until_post = time_delta.total_seconds()

            if seconds_until_post > 0:
                application.job_queue.run_once(
                    publish_scheduled_post,
                    seconds_until_post,
                    data={
                        'message_text': post['message_text'], 
                        'image_url': post['image_url'],
                        'post_id': post['id']
                    },
                    name=str(post['id'])
                )
                loaded_count += 1
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç ID: {post['id']}")
            else:
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π
                db.mark_as_published(post['id'])
                logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –ø–æ—Å—Ç ID: {post['id']}")
                
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
    except Exception as e:
        logger.error(f"Error loading scheduled posts: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("schedule", schedule_post))
        application.add_handler(CommandHandler("post_now", post_now))
        application.add_handler(CommandHandler("list_posts", list_posts))
        application.add_handler(ChatMemberHandler(welcome_new_member, ChatMemberHandler.CHAT_MEMBER))

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        application.job_queue.run_once(
            lambda ctx: load_scheduled_posts(application), 
            3
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        raise

if __name__ == '__main__':
    main()

