import os
import logging
import sqlite3
import threading
import time
import random
import re
from datetime import datetime, timedelta
import telebot
from dotenv import load_dotenv

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã)
TIMEZONE_OFFSET = 3

def get_current_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –ø–æ–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"""
    return datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)

def parse_schedule_time(date_str, time_str):
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")

def format_time(dt):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return dt.strftime('%Y-%m-%d %H:%M:%S')

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
ADMIN_ID = os.getenv('ADMIN_ID')

bot = telebot.TeleBot(BOT_TOKEN)

# SQLite –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
def adapt_datetime(dt):
    return dt.isoformat()

def convert_datetime(text):
    return datetime.fromisoformat(text.decode())

sqlite3.register_adapter(datetime, adapt_datetime)
sqlite3.register_converter("DATETIME", convert_datetime)

from telebot import types

@bot.message_handler(content_types=['new_chat_members'])
def welcome_new_member(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π"""
    try:
        for new_member in message.new_chat_members:
            if new_member.id == bot.get_me().id:
                continue
                
            if str(message.chat.id) == CHANNEL_ID:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
                markup = types.InlineKeyboardMarkup()
                channel_btn = types.InlineKeyboardButton(
                    "üì± –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
                    url="https://t.me/e_f_world"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
                )
                markup.add(channel_btn)
                
                welcome_text = f"""
üèÜ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {new_member.first_name}!*

–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–∞–Ω–∞–ª—É –æ *–û–±–æ –≤—Å—ë–º —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–º*:

üöÄ **–ü–µ—Ä–≤—ã–µ –≤ –º–∏—Ä–µ** –æ—Ç–∫—Ä—ã—Ç–∏—è
‚≠ê **–ú–∏—Ä–æ–≤—ã–µ —Ä–µ–∫–æ—Ä–¥—ã** –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è  
üí° **–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ** —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
üìå **–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ** —Å–æ–±—ã—Ç–∏—è

*–ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏—á–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ:*
                """
                
                bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=welcome_text,
                    parse_mode='Markdown',
                    reply_markup=markup
                )
                
                logger.info(f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª: {new_member.first_name}")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏: {e}")

@bot.message_handler(commands=['stats'])
def stats_command(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    try:
        current_time = get_current_time()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã
        conn = sqlite3.connect('posts.db', detect_types=sqlite3.PARSE_DECLTYPES)
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM scheduled_posts WHERE is_published = TRUE')
        published_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM scheduled_posts WHERE is_published = FALSE')
        pending_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM scheduled_posts')
        total_count = cursor.fetchone()[0]
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
        cursor.execute('''
            SELECT scheduled_time FROM scheduled_posts 
            WHERE is_published = TRUE 
            ORDER BY scheduled_time DESC 
            LIMIT 1
        ''')
        last_post = cursor.fetchone()
        last_post_time = last_post[0].strftime('%d.%m.%Y %H:%M') if last_post else '–ù–µ—Ç'
        
        conn.close()
        
        stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*

üìà *–ü—É–±–ª–∏–∫–∞—Ü–∏–∏:*
‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count}
‚è≥ –û–∂–∏–¥–∞–µ—Ç: {pending_count}
üìä –í—Å–µ–≥–æ: {total_count}

üïí *–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*
‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%H:%M')}
üìÖ –°–µ–≥–æ–¥–Ω—è: {current_time.strftime('%d.%m.%Y')}
üìÆ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {last_post_time}

üíæ *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:*
üóÉÔ∏è –¢–∞–±–ª–∏—Ü—ã: scheduled_posts
üîß –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞
        """
        
        bot.reply_to(message, stats_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

class DatabaseManager:
    def __init__(self):
        self.init_db()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect('posts.db', detect_types=sqlite3.PARSE_DECLTYPES)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS scheduled_posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                message_text TEXT,
                scheduled_time DATETIME,
                is_published BOOLEAN DEFAULT FALSE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()
        logger.info("Database initialized successfully")

    def save_scheduled_post(self, message_text, scheduled_time):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect('posts.db', detect_types=sqlite3.PARSE_DECLTYPES)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO scheduled_posts (message_text, scheduled_time)
            VALUES (?, ?)
        ''', (message_text, scheduled_time))
        conn.commit()
        post_id = cursor.lastrowid
        conn.close()
        return post_id
    
    def get_pending_posts(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        try:
            conn = sqlite3.connect('posts.db', detect_types=sqlite3.PARSE_DECLTYPES)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, message_text, scheduled_time 
                FROM scheduled_posts 
                WHERE is_published = FALSE
                ORDER BY scheduled_time
            ''')
            posts = cursor.fetchall()
            conn.close()
            return posts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
            return []
    
    def mark_as_published(self, post_id):
        """–û—Ç–º–µ—á–∞–µ—Ç –ø–æ—Å—Ç –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π"""
        conn = sqlite3.connect('posts.db', detect_types=sqlite3.PARSE_DECLTYPES)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE scheduled_posts 
            SET is_published = TRUE 
            WHERE id = ?
        ''', (post_id,))
        conn.commit()
        conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = DatabaseManager()

def send_formatted_message(chat_id, text):
    """
    –ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    """
    # –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = text.replace('\\n', '\n')
    
    try:
        # –ü—Ä–æ–±—É–µ–º Markdown
        bot.send_message(chat_id, text, parse_mode='Markdown')
        return True
    except:
        try:
            # –ü—Ä–æ–±—É–µ–º HTML
            html_text = text
            html_text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', html_text)
            html_text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', html_text) 
            html_text = re.sub(r'__(.*?)__', r'<u>\1</u>', html_text)
            bot.send_message(chat_id, html_text, parse_mode='HTML')
            return True
        except:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            bot.send_message(chat_id, text, parse_mode=None)
            return True

def publish_scheduled_posts():
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    try:
        posts = db.get_pending_posts()
        now = get_current_time()
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–æ–≤... –ù–∞–π–¥–µ–Ω–æ: {len(posts)}")
        logger.info(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {format_time(now)}")
        
        published_count = 0
        for post in posts:
            post_id, message_text, scheduled_time = post
            
            time_left = (scheduled_time - now).total_seconds()
            logger.info(f"üìã –ü–æ—Å—Ç {post_id}: –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {format_time(scheduled_time)}, –æ—Å—Ç–∞–ª–æ—Å—å {time_left:.0f} —Å–µ–∫")
            
            # –ü—É–±–ª–∏–∫—É–µ–º –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ò–õ–ò –ø—Ä–æ—à–ª–æ
            if time_left <= 0:
                try:
                    logger.info(f"üöÄ –ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç {post_id}: {message_text[:50]}...")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                    success = send_formatted_message(CHANNEL_ID, message_text)
                    
                    if success:
                        db.mark_as_published(post_id)
                        published_count += 1
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç ID: {post_id}")
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç ID: {post_id}")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
                    time.sleep(1)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_id}: {e}")
        
        if published_count > 0:
            logger.info(f"üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {published_count} –ø–æ—Å—Ç–æ–≤")
        else:
            logger.info("‚è≥ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ publish_scheduled_posts: {e}")

def post_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤"""
    logger.info("üïí –ó–∞–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤...")
    
    while True:
        try:
            publish_scheduled_posts()
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            time.sleep(30)

def safe_polling():
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
    while True:
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            bot.polling(none_stop=True, interval=1, timeout=60)
            
        except Exception as e:
            if "409" in str(e):
                logger.warning("‚ö†Ô∏è –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É 10 —Å–µ–∫—É–Ω–¥...")
                time.sleep(10)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
                time.sleep(30)

@bot.message_handler(commands=['start'])
def start_command(message):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ start"""
    if str(message.from_user.id) == ADMIN_ID:
        # –ê–¥–º–∏–Ω
        current_time = get_current_time()
        response = (
            f"ü§ñ *–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º*\n"
            f"‚è∞ –í—Ä–µ–º—è: {current_time.strftime('%d.%m.%Y %H:%M')}\n\n"
            "‚öôÔ∏è *–ö–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ /post_now —Ç–µ–∫—Å—Ç - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å\n"
            "‚Ä¢ /schedule \"—Ç–µ–∫—Å—Ç\" –¥–∞—Ç–∞ –≤—Ä–µ–º—è - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å\n"  
            "‚Ä¢ /list_posts - —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ /debug_posts - –æ—Ç–ª–∞–¥–∫–∞\n"
            "‚Ä¢ /setup_welcome - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
            "‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            "üìù *–ü—Ä–∏–º–µ—Ä—ã:*\n"
            "/post_now –ü—Ä–∏–≤–µ—Ç –º–∏—Ä!\n"
            '/schedule "**–í–∞–∂–Ω–æ**" 2024-01-15 15:30'
        )
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        response = (
            "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n"
            "üèÜ –Ø - –±–æ—Ç –∫–∞–Ω–∞–ª–∞ *\"–û–±–æ –≤—Å—ë–º —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–º\"*\n\n"
            "üìå –ú—ã –ø—É–±–ª–∏–∫—É–µ–º:\n"
            "‚Ä¢ –ü–µ—Ä–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è\n"  
            "‚Ä¢ –ú–∏—Ä–æ–≤—ã–µ —Ä–µ–∫–æ—Ä–¥—ã\n"
            "‚Ä¢ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
            "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n\n"
            "üîó *–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:*\n"
            "–ò—â–∏—Ç–µ `–û–±–æ –≤—Å—ë–º —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–º` –≤ Telegram\n\n"
            "*–ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ —Å–∞–º–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ!* ‚ú®"
        )

@bot.message_handler(commands=['setup_welcome'])
def setup_welcome_command(message):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    try:
        welcome_text = """
üèÜ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–û–±–æ –≤—Å—ë–º —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–º"!* 

‚ú® *–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:*
‚Ä¢ –ü–µ—Ä–≤—ã–µ –≤ –º–∏—Ä–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
‚Ä¢ –ú–∏—Ä–æ–≤—ã–µ —Ä–µ–∫–æ—Ä–¥—ã –ì–∏–Ω–Ω–µ—Å—Å–∞  
‚Ä¢ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ "–≤–ø–µ—Ä–≤—ã–µ"

üì± *–°–æ–≤–µ—Ç:* –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!

*–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!* üöÄ
        """
        
        sent_message = bot.send_message(
            CHANNEL_ID,
            welcome_text,
            parse_mode='Markdown'
        )
        
        bot.reply_to(message, "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!")
            
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")



    
    bot.reply_to(message, response, parse_mode='Markdown')

@bot.message_handler(commands=['post_now'])
def post_now_command(message):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    text = message.text.replace('/post_now', '').strip()
    
    if not text:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post_now –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞')
        return

    try:
        success = send_formatted_message(CHANNEL_ID, text)
        if success:
            bot.reply_to(message, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!")
            logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç: {text[:50]}...")
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ post_now: {e}")

@bot.message_handler(commands=['schedule'])
def schedule_command(message):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    full_text = message.text.strip()
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {full_text}")
    
    if len(full_text) <= len('/schedule'):
        bot.reply_to(message, 
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /schedule "–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞" –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n\n'
            '–ü—Ä–∏–º–µ—Ä—ã:\n'
            '/schedule "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä" 2024-01-15 15:30\n'
            '/schedule "**–í–∞–∂–Ω–æ–µ** –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" 2024-01-15 16:00'
        )
        return

    try:
        command_rest = full_text[len('/schedule'):].strip()
        
        if command_rest.startswith('"'):
            parts = command_rest.split('"', 2)
            if len(parts) < 3:
                bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: /schedule \"–¢–µ–∫—Å—Ç\" –¥–∞—Ç–∞ –≤—Ä–µ–º—è")
                return
                
            message_text = parts[1].strip()
            datetime_part = parts[2].strip()
        else:
            parts = command_rest.split()
            if len(parts) < 3:
                bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç, –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è")
                return
                
            message_text = ' '.join(parts[:-2])
            datetime_part = ' '.join(parts[-2:])

        if not message_text:
            bot.reply_to(message, "‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return

        datetime_parts = datetime_part.split()
        if len(datetime_parts) < 2:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ò –≤—Ä–µ–º—è: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
            return

        date_str = datetime_parts[0]
        time_str = datetime_parts[1]

        scheduled_time = parse_schedule_time(date_str, time_str)
        now = get_current_time()
        
        time_diff = (scheduled_time - now).total_seconds()
        logger.info(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: {format_time(scheduled_time)}, —á–µ—Ä–µ–∑ {time_diff:.0f} —Å–µ–∫")
        
        if time_diff <= 0:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è!")
            return

        post_id = db.save_scheduled_post(message_text, scheduled_time)
        
        bot.reply_to(message, 
            f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!\n"
            f"üÜî ID: {post_id}\n"
            f"üìÖ –ö–æ–≥–¥–∞: {scheduled_time.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            f"üìù –¢–µ–∫—Å—Ç: {message_text[:80]}...\n\n"
            f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%H:%M')}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug_posts –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"
        )
        logger.info(f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–æ—Å—Ç ID: {post_id} –Ω–∞ {format_time(scheduled_time)}")
        
    except ValueError as e:
        error_msg = f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: 2024-01-15 15:30"
        bot.reply_to(message, error_msg)
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {e}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ schedule_command: {e}")

@bot.message_handler(commands=['list_posts'])
def list_posts_command(message):
    """–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    posts = db.get_pending_posts()
    now = get_current_time()
    
    if not posts:
        bot.reply_to(message, "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        return

    response = f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã (–≤—Ä–µ–º—è: {now.strftime('%H:%M')}):\n\n"
    for post in posts:
        post_id, text, post_time = post
        time_str = post_time.strftime('%d.%m.%Y %H:%M')
        time_left = (post_time - now).total_seconds()
        
        status = "‚úÖ –ì–û–¢–û–í" if time_left <= 0 else f"‚è≥ {int(time_left/60)} –º–∏–Ω"
        response += f"üÜî {post_id} | {status}\n"
        response += f"üìÖ {time_str}\n"
        response += f"üìù {text[:60]}...\n"
        response += "‚îÄ" * 40 + "\n"

    bot.reply_to(message, response)

@bot.message_handler(commands=['debug_posts'])
def debug_posts_command(message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞—Ö"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    try:
        conn = sqlite3.connect('posts.db', detect_types=sqlite3.PARSE_DECLTYPES)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT id, message_text, scheduled_time, is_published, created_at
            FROM scheduled_posts 
            ORDER BY scheduled_time
        ''')
        all_posts = cursor.fetchall()
        conn.close()
        
        now = get_current_time()
        response = f"üêõ –û–¢–õ–ê–î–ö–ê –ü–û–°–¢–û–í (–≤—Å–µ–≥–æ: {len(all_posts)})\n"
        response += f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {format_time(now)}\n\n"
        
        for post in all_posts:
            post_id, text, post_time, is_published, created_at = post
            time_str = format_time(post_time)
            time_left = (post_time - now).total_seconds()
            
            status = "‚úÖ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù" if is_published else f"‚è≥ –û–∂–∏–¥–∞–µ—Ç ({int(time_left)} —Å–µ–∫)"
            response += f"üÜî {post_id} | {status}\n"
            response += f"üìÖ {time_str}\n"
            response += f"üìù {text[:30]}...\n"
            response += "‚îÄ" * 40 + "\n"
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        publish_scheduled_posts()
        
        bot.reply_to(message, response)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")

@bot.message_handler(commands=['formatting'])
def formatting_command(message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞"""
    help_text = """
üé® **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**

**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** - –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏:
`**–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**` ‚Üí **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**

*–ö—É—Ä—Å–∏–≤* - –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏:
`*–∫—É—Ä—Å–∏–≤*` ‚Üí *–∫—É—Ä—Å–∏–≤*

__–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π__ - –¥–≤–æ–π–Ω–æ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ:
`__–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π__` ‚Üí __–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π__

`–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π` - –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏:
`` `–∫–æ–¥` `` ‚Üí `–∫–æ–¥`

üìù **–ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫:**
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `\\n` –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏

**–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:**
/schedule "**–í–ê–ñ–ù–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï**\\n\\n–°–µ–≥–æ–¥–Ω—è *–æ—Å–æ–±–µ–Ω–Ω—ã–π* –¥–µ–Ω—å!\\n__–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ__ –Ω–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ." 2024-01-15 16:30

**–†–µ–∑—É–ª—å—Ç–∞—Ç:**
**–í–ê–ñ–ù–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï**

–°–µ–≥–æ–¥–Ω—è *–æ—Å–æ–±–µ–Ω–Ω—ã–π* –¥–µ–Ω—å!
__–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ__ –Ω–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.
"""
    bot.reply_to(message, help_text, parse_mode='Markdown')

@bot.message_handler(commands=['help'])
def help_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    current_time = get_current_time()
    
    bot.reply_to(message,
        f"üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–≤—Ä–µ–º—è: {current_time.strftime('%H:%M')}):\n\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/post_now [—Ç–µ–∫—Å—Ç] - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç —Å–µ–π—á–∞—Å\n"
        "/schedule [—Ç–µ–∫—Å—Ç] [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è] - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç\n"
        "/list_posts - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã\n"
        "/debug_posts - –æ—Ç–ª–∞–¥–∫–∞ –ø–æ—Å—Ç–æ–≤\n"
        "/formatting - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n"
        "–ü—Ä–∏–º–µ—Ä: /schedule \"**–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**\" 2024-01-15 17:00"
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not all([BOT_TOKEN, CHANNEL_ID, ADMIN_ID]):
        logger.error("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        logger.error(f"BOT_TOKEN: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
        logger.error(f"CHANNEL_ID: {'‚úÖ' if CHANNEL_ID else '‚ùå'}")
        logger.error(f"ADMIN_ID: {'‚úÖ' if ADMIN_ID else '‚ùå'}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler_thread = threading.Thread(target=post_scheduler, daemon=True)
    scheduler_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º polling
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ Telegram")
    safe_polling()

if __name__ == '__main__':
    main()






