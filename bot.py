import os
import logging
import threading
import time
import re
import requests
import io
import urllib.parse
from datetime import datetime, timedelta, timezone
from PIL import Image
import telebot
from dotenv import load_dotenv
import psycopg2
from psycopg2.extras import RealDictCursor

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
ADMIN_ID = os.getenv('ADMIN_ID')
DATABASE_URL = os.getenv('DATABASE_URL')

bot = telebot.TeleBot(BOT_TOKEN)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã)
TIMEZONE_OFFSET = 3

# –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
bot_running = True

# –ò–º–ø–æ—Ä—Ç content_finder
try:
    from content_finder import setup_content_finder
    CONTENT_FINDER_AVAILABLE = True
except ImportError as e:
    logger.warning(f"‚ùå ContentFinder –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    CONTENT_FINDER_AVAILABLE = False

# ... (–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∑–¥–µ—Å—å: get_current_time, download_image, send_post_with_image, etc.)
# ... (DatabaseManager –∫–ª–∞—Å—Å –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ—Å—Ç–æ–≤
editing_posts = {}

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global bot_running
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    if not all([BOT_TOKEN, CHANNEL_ID, ADMIN_ID]):
        logger.error("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
    start_scheduler()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    safe_polling()

# –í–°–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –ü–û–°–õ–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –í–°–ï–• –§–£–ù–ö–¶–ò–ô:

@bot.message_handler(commands=['start'])
def start_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ start"""
    if str(message.from_user.id) == ADMIN_ID:
        current_time = get_current_time()
        response = f"""
ü§ñ –ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º

‚è∞ –í—Ä–µ–º—è: {current_time.strftime('%H:%M %d.%m.%Y')}

‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã:
/post_now - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç
/schedule - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç  
/list_posts - —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/find_content - –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
/view_found - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
/time - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è
/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞

üìù –ü—Ä–∏–º–µ—Ä:
/schedule "–í–∞–∂–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ" 2024-01-15 15:30
"""
        bot.reply_to(message, response)
    else:
        response = """
üëã –ü—Ä–∏–≤–µ—Ç!

–Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞ "–°–∞–º–æ–µ –ü–µ—Ä–≤–æ–µ" üèÜ

üìå –ú—ã –ø—É–±–ª–∏–∫—É–µ–º:
‚Ä¢ –ü–µ—Ä–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è
‚Ä¢ –ú–∏—Ä–æ–≤—ã–µ —Ä–µ–∫–æ—Ä–¥—ã
‚Ä¢ –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏

üí° –ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ —Å–∞–º–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ!
"""
        bot.reply_to(message, response)

@bot.message_handler(commands=['stop'])
def stop_command(message):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    global bot_running
    
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    bot_running = False
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
    bot.reply_to(message, "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞
    time.sleep(2)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    exit(0)

@bot.message_handler(commands=['time'])
def time_command(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ—Ç–∞"""
    current_time = get_current_time()
    bot.reply_to(message, f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ—Ç–∞: {current_time.strftime('%H:%M:%S %d.%m.%Y')}")

@bot.message_handler(commands=['post_now'])
def post_now_command(message):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    text = message.text.replace('/post_now', '').strip()
    if not text:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post_now –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞')
        return

    try:
        success = send_formatted_message(CHANNEL_ID, text)
        if success:
            bot.reply_to(message, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['schedule'])
def schedule_command(message):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    try:
        parts = message.text.split('"')
        if len(parts) < 3:
            bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /schedule "–¢–µ–∫—Å—Ç" 2024-01-15 15:00')
            return

        message_text = parts[1]
        datetime_part = parts[2].strip().split()
        
        if len(datetime_part) < 2:
            bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
            return

        date_str, time_str = datetime_part[0], datetime_part[1]
        scheduled_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        
        if scheduled_time <= get_current_time():
            bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è!")
            return

        post_id = db.save_scheduled_post(message_text, scheduled_time)
        bot.reply_to(message, f"‚úÖ –ü–æ—Å—Ç #{post_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time.strftime('%H:%M %d.%m.%Y')}")
        
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['list_posts'])
def list_posts_command(message):
    """–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    posts = db.get_pending_posts()
    now = get_current_time()
    
    if not posts:
        bot.reply_to(message, "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        return

    response = "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n"
    for post in posts:
        post_id, text, post_time = post
        time_str = post_time.strftime('%d.%m %H:%M')
        time_left = (post_time - now).total_seconds()
        
        status = "‚úÖ –ì–û–¢–û–í" if time_left <= 0 else f"‚è≥ {int(time_left/60)} –º–∏–Ω"
        response += f"üÜî {post_id} | {status}\n"
        response += f"üìÖ {time_str}\n"
        response += f"üìù {text[:50]}...\n"
        response += "‚îÄ" * 30 + "\n"

    bot.reply_to(message, response)

@bot.message_handler(commands=['stats'])
def stats_command(message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    try:
        current_time = get_current_time()
        
        posts = db.get_pending_posts()
        pending_count = len(posts)
        
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM scheduled_posts WHERE is_published = TRUE')
        published_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM found_content WHERE is_published = TRUE')
        auto_published_count = cursor.fetchone()[0]
        
        stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ PostgreSQL
üìä –ü—É–±–ª–∏–∫–∞—Ü–∏–∏:
‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤—Ä—É—á–Ω—É—é: {published_count}
ü§ñ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∞–≤—Ç–æ: {auto_published_count}
‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_count}

‚è∞ –í—Ä–µ–º—è: {current_time.strftime('%H:%M %d.%m.%Y')}

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ! üöÄ
"""
        bot.reply_to(message, stats_text)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@bot.message_handler(commands=['find_content'])
def find_content_command(message):
    """–†—É—á–Ω–æ–π –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    if not CONTENT_FINDER_AVAILABLE:
        bot.reply_to(message, "‚ùå –ú–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    try:
        bot.reply_to(message, "üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        finder = setup_content_finder()
        found_content = finder.search_content(max_posts=2)
        
        if found_content:
            for content in found_content:
                content_id = db.add_found_content(content)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
                preview = finder.format_for_preview(content)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                markup = telebot.types.InlineKeyboardMarkup()
                markup.row(
                    telebot.types.InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{content_id}"),
                    telebot.types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{content_id}"),
                    telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{content_id}")
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                bot.send_message(
                    message.chat.id, 
                    preview, 
                    reply_markup=markup
                )
                time.sleep(1)
            
            bot.reply_to(message, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_content)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—ã—à–µ!")
        else:
            bot.reply_to(message, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

@bot.message_handler(commands=['view_found'])
def view_found_command(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚õî –ù–µ—Ç –ø—Ä–∞–≤!")
        return

    try:
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT id, title, content, category, is_approved, is_published
            FROM found_content 
            ORDER BY found_at DESC 
            LIMIT 10
        ''')
        posts = cursor.fetchall()
        
        if not posts:
            bot.reply_to(message, "üì≠ –ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            return
        
        response = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n"
        for post in posts:
            post_id, title, content, category, approved, published = post
            
            status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if approved else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
            status += " üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" if published else ""
            
            response += f"üÜî {post_id} | {status}\n"
            response += f"üìÅ {category}\n"
            response += f"üìù {title[:50]}...\n"
            response += "‚îÄ" * 30 + "\n"
        
        bot.reply_to(message, response)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤: {e}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    try:
        if call.data.startswith('approve_'):
            content_id = int(call.data.split('_')[1])
            bot.answer_callback_query(call.id, "üì§ –ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –±–∞–∑—ã
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT content, image_url FROM found_content WHERE id = %s', (content_id,))
            result = cursor.fetchone()
            
            if result:
                full_post_text, image_url = result
                
                # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
                success = publish_approved_post(content_id)
                
                if success:
                    final_text = "‚úÖ –ü–û–°–¢ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù –í –ö–ê–ù–ê–õ–ï! üì¢"
                    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π
                    cursor.execute('UPDATE found_content SET is_approved = TRUE WHERE id = %s', (content_id,))
                    conn.commit()
                else:
                    final_text = "‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"
                
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=final_text
                )
            
        elif call.data.startswith('reject_'):
            content_id = int(call.data.split('_')[1])
            bot.answer_callback_query(call.id, "‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            
            # –ü—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute('DELETE FROM found_content WHERE id = %s', (content_id,))
            conn.commit()
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω"
            )
            
        elif call.data.startswith('edit_'):
            content_id = int(call.data.split('_')[1])
            bot.answer_callback_query(call.id, "‚úèÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT content FROM found_content WHERE id = %s', (content_id,))
            result = cursor.fetchone()
            
            if result:
                full_post_text = result[0]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                editing_posts[call.message.chat.id] = content_id
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                edit_message = f"""‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–°–¢–ê #{content_id}

–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:
{full_post_text}

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:"""
                
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                
                bot.send_message(
                    call.message.chat.id,
                    edit_message
                )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

@bot.message_handler(func=lambda message: message.chat.id in editing_posts)
def handle_edit_text(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
    try:
        content_id = editing_posts.pop(message.chat.id, None)
        if not content_id:
            return
            
        new_content = message.text.strip()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE found_content 
            SET content = %s 
            WHERE id = %s
        ''', (new_content, content_id))
        conn.commit()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        updated_preview = f"""‚úèÔ∏è –¢–ï–ö–°–¢ –û–ë–ù–û–í–õ–ï–ù

{new_content}

‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ–¥–æ–±—Ä–∏—Ç—å –ø–æ—Å—Ç."""
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        markup = telebot.types.InlineKeyboardMarkup()
        markup.row(
            telebot.types.InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{content_id}"),
            telebot.types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{content_id}"),
            telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{content_id}")
        )
        
        bot.send_message(
            message.chat.id,
            updated_preview,
            reply_markup=markup
        )
        
        logger.info(f"‚úèÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç {content_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

if __name__ == '__main__':
    main()
