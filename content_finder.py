# content_finder.py
import logging
import requests
from datetime import datetime
import random
import hashlib
from bs4 import BeautifulSoup
import re
import json
import time
import urllib.parse

logger = logging.getLogger(__name__)

class ContentFinder:
    def __init__(self, db_manager=None):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        })
        
        self.db_manager = db_manager
        self.post_hashes = set()
        self.load_existing_hashes()
        
        # –ë–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        self.sources = [
            self.parse_wikipedia_firsts,
            self.parse_historical_events,
            self.parse_science_discoveries,
            self.parse_tech_innovations,
            self.parse_cultural_firsts,
            self.parse_sports_records
        ]

    def load_existing_hashes(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ—à–∏ –∏–∑ –ë–î –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if self.db_manager:
            try:
                conn = self.db_manager.get_connection()
                cursor = conn.cursor()
                cursor.execute('SELECT title, content FROM found_content')
                existing_posts = cursor.fetchall()
                
                for title, content in existing_posts:
                    text = title + content[:200]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    content_hash = hashlib.md5(text.encode()).hexdigest()
                    self.post_hashes.add(content_hash)
                    
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.post_hashes)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ö–µ—à–µ–π –∏–∑ –ë–î")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–µ—à–µ–π –∏–∑ –ë–î: {e}")

    def search_content(self, max_posts=3):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        logger.info("üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        found_content = []
        attempts = 0
        max_attempts = 10
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        random.shuffle(self.sources)
        
        while len(found_content) < max_posts and attempts < max_attempts:
            attempts += 1
            logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ {attempts}/{max_attempts}")
            
            for source in self.sources:
                try:
                    if len(found_content) >= max_posts:
                        break
                        
                    logger.info(f"üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫: {source.__name__}")
                    content_list = source()
                    
                    if content_list:
                        for content in content_list:
                            if self.is_truly_unique_content(content) and len(found_content) < max_posts:
                                found_content.append(content)
                                content_hash = self.get_content_hash(content)
                                self.post_hashes.add(content_hash)
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç: {content['title'][:50]}...")
                            
                            if len(found_content) >= max_posts:
                                break
                    else:
                        logger.info(f"‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ {source.__name__} –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ–Ω—Ç–µ–Ω—Ç")
                
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source.__name__}: {e}")
                    continue
                
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            time.sleep(2)
        
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(found_content)}")
        return found_content

    def is_truly_unique_content(self, content):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Ö–µ—à–∏ –∏ –ë–î"""
        content_hash = self.get_content_hash(content)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ø–∞–º—è—Ç–∏
        if content_hash in self.post_hashes:
            logger.info(f"üö´ –ü–æ—Å—Ç —É–∂–µ –≤ –ø–∞–º—è—Ç–∏: {content['title'][:30]}...")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î
        if self.db_manager and self.is_content_in_db(content):
            logger.info(f"üö´ –ü–æ—Å—Ç —É–∂–µ –≤ –ë–î: {content['title'][:30]}...")
            return False
            
        return True

    def is_content_in_db(self, content):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.db_manager.get_connection()
            cursor = conn.cursor()
            
            # –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            search_term = content['title'][:40]
            cursor.execute('''
                SELECT id FROM found_content 
                WHERE title LIKE %s OR content LIKE %s
            ''', (f"%{search_term}%", f"%{search_term}%"))
            
            result = cursor.fetchone()
            return result is not None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            return False

    def get_content_hash(self, content):
        """–°–æ–∑–¥–∞–µ—Ç —Ö–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        text = content['title'] + content['summary'][:150]
        return hashlib.md5(text.encode()).hexdigest()

    def parse_wikipedia_firsts(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏"""
        try:
            articles = []
            
            # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
            search_queries = [
                "–ø–µ—Ä–≤—ã–π –≤ –º–∏—Ä–µ",
                "–ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ", 
                "–ø–µ—Ä–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ",
                "–ø–µ—Ä–≤—ã–π –ø–æ–ª–µ—Ç",
                "–ø–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
                "–ø–µ—Ä–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä",
                "–ø–µ—Ä–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω",
                "–ø–µ—Ä–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
                "–ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º",
                "–ø–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞",
                "–ø–µ—Ä–≤—ã–π —Å–ø—É—Ç–Ω–∏–∫",
                "–ø–µ—Ä–≤—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ—Å–º–æ—Å–µ",
                "–ø–µ—Ä–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è",
                "–ø–µ—Ä–≤–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ",
                "–ø–µ—Ä–≤—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
                "–ø–µ—Ä–≤—ã–π –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω",
                "–ø–µ—Ä–≤—ã–π —Å–∞–º–æ–ª–µ—Ç",
                "–ø–µ—Ä–≤–∞—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è –ª–∞–º–ø–æ—á–∫–∞",
                "–ø–µ—Ä–≤—ã–π —Ç–µ–ª–µ–≤–∏–∑–æ—Ä",
                "–ø–µ—Ä–≤–æ–µ —Ä–∞–¥–∏–æ"
            ]
            
            for query in random.sample(search_queries, 4):  # –ë–µ—Ä–µ–º 4 —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
                try:
                    url = "https://ru.wikipedia.org/w/api.php"
                    params = {
                        'action': 'query',
                        'list': 'search',
                        'srsearch': query,
                        'format': 'json',
                        'srlimit': 5,
                        'srwhat': 'text'
                    }
                    
                    response = self.session.get(url, params=params, timeout=15)
                    data = response.json()
                    
                    for item in data.get('query', {}).get('search', []):
                        title = item.get('title', '')
                        snippet = item.get('snippet', '')
                        
                        # –û—á–∏—â–∞–µ–º HTML —Ç–µ–≥–∏ –∏–∑ —Å–Ω–∏–ø–ø–µ—Ç–∞
                        soup = BeautifulSoup(snippet, 'html.parser')
                        clean_snippet = soup.get_text()
                        
                        if self.is_relevant_content(title + clean_snippet):
                            full_content = self.get_wikipedia_content(title)
                            if full_content and len(full_content) > 80:
                                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                                formatted_post = self.create_wikipedia_post(title, full_content, query)
                                
                                articles.append({
                                    'title': title,
                                    'summary': formatted_post,
                                    'category': self.detect_category(title, full_content),
                                    'url': f"https://ru.wikipedia.org/wiki/{urllib.parse.quote(title.replace(' ', '_'))}",
                                    'image_url': self.get_wikipedia_image(title),
                                    'found_date': datetime.now()
                                })
                                
                                if len(articles) >= 3:
                                    return articles
                    
                    time.sleep(1.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞ {query}: {e}")
                    continue
                    
            return articles[:2]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 2 —Å—Ç–∞—Ç–µ–π
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Wikipedia: {e}")
            return []

    def parse_historical_events(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π"""
        try:
            articles = []
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ–≤
            historical_methods = [
                self.parse_historical_dates,
                self.parse_famous_firsts,
                self.parse_invention_history
            ]
            
            for method in random.sample(historical_methods, 2):
                try:
                    content = method()
                    if content:
                        articles.extend(content)
                        if len(articles) >= 2:
                            break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                    continue
            
            return articles[:2]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
            return []

    def parse_historical_dates(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞—Ç"""
        try:
            # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è —Å —É–ø–æ—Ä–æ–º –Ω–∞ "–ø–µ—Ä–≤—ã–µ"
            historical_events = [
                {
                    'title': '–ü–µ—Ä–≤–∞—è –ø–µ—á–∞—Ç–Ω–∞—è –∫–Ω–∏–≥–∞',
                    'content': '–ë–∏–±–ª–∏—è –ì—É—Ç–µ–Ω–±–µ—Ä–≥–∞, –∏–∑–¥–∞–Ω–Ω–∞—è –≤ 1455 –≥–æ–¥—É, —Å—Ç–∞–ª–∞ –ø–µ—Ä–≤–æ–π –∫–Ω–∏–≥–æ–π, –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–Ω–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–≤–∏–∂–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞. –≠—Ç–æ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ò–æ–≥–∞–Ω–Ω–∞ –ì—É—Ç–µ–Ω–±–µ—Ä–≥–∞ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π.',
                    'year': '1455'
                },
                {
                    'title': '–ü–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
                    'content': '–í 1826 –≥–æ–¥—É –ñ–æ–∑–µ—Ñ –ù–∏—Å–µ—Ñ–æ—Ä –ù—å–µ–ø—Å —Å–æ–∑–¥–∞–ª –ø–µ—Ä–≤—É—é –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é ¬´–í–∏–¥ –∏–∑ –æ–∫–Ω–∞ –≤ –õ–µ –ì—Ä–∞¬ª. –≠–∫—Å–ø–æ–∑–∏—Ü–∏—è –¥–ª–∏–ª–∞—Å—å 8 —á–∞—Å–æ–≤.',
                    'year': '1826'
                },
                {
                    'title': '–ü–µ—Ä–≤—ã–π –ø–æ–ª–µ—Ç –±—Ä–∞—Ç—å–µ–≤ –†–∞–π—Ç',
                    'content': '17 –¥–µ–∫–∞–±—Ä—è 1903 –≥–æ–¥–∞ –±—Ä–∞—Ç—å—è –†–∞–π—Ç —Å–æ–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–≤—ã–π —É–ø—Ä–∞–≤–ª—è–µ–º—ã–π –ø–æ–ª–µ—Ç –Ω–∞ —Å–∞–º–æ–ª–µ—Ç–µ —Å –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ 12 —Å–µ–∫—É–Ω–¥.',
                    'year': '1903'
                },
                {
                    'title': '–ü–µ—Ä–≤–∞—è —É—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω—Å–ø–ª–∞–Ω—Ç–∞—Ü–∏—è —Å–µ—Ä–¥—Ü–∞',
                    'content': '3 –¥–µ–∫–∞–±—Ä—è 1967 –≥–æ–¥–∞ –ö—Ä–∏—Å—Ç–∏–∞–Ω –ë–∞—Ä–Ω–∞—Ä–¥ –ø—Ä–æ–≤–µ–ª –ø–µ—Ä–≤—É—é —É—Å–ø–µ—à–Ω—É—é –ø–µ—Ä–µ—Å–∞–¥–∫—É —Å–µ—Ä–¥—Ü–∞ —á–µ–ª–æ–≤–µ–∫—É. –û–ø–µ—Ä–∞—Ü–∏—è –¥–ª–∏–ª–∞—Å—å 9 —á–∞—Å–æ–≤.',
                    'year': '1967'
                }
            ]
            
            articles = []
            for event in random.sample(historical_events, 2):
                formatted_post = self.format_historical_post(event['title'], event['content'], event['year'])
                
                articles.append({
                    'title': event['title'],
                    'summary': formatted_post,
                    'category': 'history',
                    'url': '',
                    'image_url': self.get_historical_image(),
                    'found_date': datetime.now()
                })
            
            return articles
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞—Ç: {e}")
            return []

    def parse_famous_firsts(self):
        """–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–µ—Ä–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        try:
            firsts = [
                {
                    'title': '–ü–µ—Ä–≤–∞—è –∂–µ–Ω—â–∏–Ω–∞-–∫–æ—Å–º–æ–Ω–∞–≤—Ç',
                    'content': '–í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –¢–µ—Ä–µ—à–∫–æ–≤–∞ —Å—Ç–∞–ª–∞ –ø–µ—Ä–≤–æ–π –∂–µ–Ω—â–∏–Ω–æ–π –≤ –∫–æ—Å–º–æ—Å–µ 16 –∏—é–Ω—è 1963 –≥–æ–¥–∞ –Ω–∞ –∫–æ—Ä–∞–±–ª–µ –í–æ—Å—Ç–æ–∫-6. –ï–µ –ø–æ–ª–µ—Ç –¥–ª–∏–ª—Å—è –ø–æ—á—Ç–∏ —Ç—Ä–æ–µ —Å—É—Ç–æ–∫.',
                    'person': '–í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –¢–µ—Ä–µ—à–∫–æ–≤–∞'
                },
                {
                    'title': '–ü–µ—Ä–≤—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç',
                    'content': '–ê–¥–∞ –õ–∞–≤–ª–µ–π—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏. –í 1843 –≥–æ–¥—É –æ–Ω–∞ –Ω–∞–ø–∏—Å–∞–ª–∞ –ø–µ—Ä–≤—É—é –≤ –º–∏—Ä–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –º–∞—à–∏–Ω—ã –ß–∞—Ä–ª—å–∑–∞ –ë—ç–±–±–∏–¥–∂–∞.',
                    'person': '–ê–¥–∞ –õ–∞–≤–ª–µ–π—Å'
                },
                {
                    'title': '–ü–µ—Ä–≤—ã–π –Ω–æ–±–µ–ª–µ–≤—Å–∫–∏–π –ª–∞—É—Ä–µ–∞—Ç',
                    'content': '–í–∏–ª—å–≥–µ–ª—å–º –ö–æ–Ω—Ä–∞–¥ –†–µ–Ω—Ç–≥–µ–Ω —Å—Ç–∞–ª –ø–µ—Ä–≤—ã–º –ª–∞—É—Ä–µ–∞—Ç–æ–º –ù–æ–±–µ–ª–µ–≤—Å–∫–æ–π –ø—Ä–µ–º–∏–∏ –ø–æ —Ñ–∏–∑–∏–∫–µ –≤ 1901 –≥–æ–¥—É –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö –ª—É—á–µ–π.',
                    'person': '–í–∏–ª—å–≥–µ–ª—å–º –†–µ–Ω—Ç–≥–µ–Ω'
                }
            ]
            
            articles = []
            for first in random.sample(firsts, 2):
                formatted_post = self.format_person_post(first['title'], first['content'], first['person'])
                
                articles.append({
                    'title': first['title'],
                    'summary': formatted_post,
                    'category': 'achievement',
                    'url': '',
                    'image_url': self.get_achievement_image(),
                    'found_date': datetime.now()
                })
            
            return articles
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
            return []

    def parse_science_discoveries(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—É—á–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π"""
        try:
            articles = []
            
            # –ù–∞—É—á–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è
            discoveries = [
                {
                    'title': '–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–µ–Ω–∏—Ü–∏–ª–ª–∏–Ω–∞',
                    'content': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –§–ª–µ–º–∏–Ω–≥ —Å–ª—É—á–∞–π–Ω–æ –æ—Ç–∫—Ä—ã–ª –ø–µ–Ω–∏—Ü–∏–ª–ª–∏–Ω –≤ 1928 –≥–æ–¥—É. –≠—Ç–æ –ø–µ—Ä–≤—ã–π –∞–Ω—Ç–∏–±–∏–æ—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏–∑–≤–µ–ª —Ä–µ–≤–æ–ª—é—Ü–∏—é –≤ –º–µ–¥–∏—Ü–∏–Ω–µ.',
                    'year': '1928',
                    'scientist': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –§–ª–µ–º–∏–Ω–≥'
                },
                {
                    'title': '–ü–µ—Ä–≤–∞—è –≤–∞–∫—Ü–∏–Ω–∞',
                    'content': '–≠–¥–≤–∞—Ä–¥ –î–∂–µ–Ω–Ω–µ—Ä —Å–æ–∑–¥–∞–ª –ø–µ—Ä–≤—É—é –≤–∞–∫—Ü–∏–Ω—É –ø—Ä–æ—Ç–∏–≤ –æ—Å–ø—ã –≤ 1796 –≥–æ–¥—É. –û–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≤–∏—Ä—É—Å –∫–æ—Ä–æ–≤—å–µ–π –æ—Å–ø—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–π –æ—Å–ø—ã.',
                    'year': '1796',
                    'scientist': '–≠–¥–≤–∞—Ä–¥ –î–∂–µ–Ω–Ω–µ—Ä'
                },
                {
                    'title': '–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –î–ù–ö',
                    'content': '–î–∂–µ–π–º—Å –£–æ—Ç—Å–æ–Ω –∏ –§—Ä—ç–Ω—Å–∏—Å –ö—Ä–∏–∫ –æ—Ç–∫—Ä—ã–ª–∏ –¥–≤–æ–π–Ω—É—é —Å–ø–∏—Ä–∞–ª—å –î–ù–ö –≤ 1953 –≥–æ–¥—É. –≠—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ –≥–µ–Ω–µ—Ç–∏–∫–µ.',
                    'year': '1953',
                    'scientist': '–£–æ—Ç—Å–æ–Ω –∏ –ö—Ä–∏–∫'
                },
                {
                    'title': '–ü–µ—Ä–≤—ã–π —Ç–µ–ª–µ—Å–∫–æ–ø',
                    'content': '–ì–∞–ª–∏–ª–µ–æ –ì–∞–ª–∏–ª–µ–π –ø–µ—Ä–≤—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ç–µ–ª–µ—Å–∫–æ–ø –¥–ª—è –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –≤ 1609 –≥–æ–¥—É. –û–Ω –æ—Ç–∫—Ä—ã–ª —Å–ø—É—Ç–Ω–∏–∫–∏ –Æ–ø–∏—Ç–µ—Ä–∞ –∏ —Ñ–∞–∑—ã –í–µ–Ω–µ—Ä—ã.',
                    'year': '1609',
                    'scientist': '–ì–∞–ª–∏–ª–µ–æ –ì–∞–ª–∏–ª–µ–π'
                }
            ]
            
            for discovery in random.sample(discoveries, 2):
                formatted_post = self.format_science_post(
                    discovery['title'], 
                    discovery['content'], 
                    discovery['year'], 
                    discovery['scientist']
                )
                
                articles.append({
                    'title': discovery['title'],
                    'summary': formatted_post,
                    'category': 'science',
                    'url': '',
                    'image_url': self.get_science_image(),
                    'found_date': datetime.now()
                })
            
            return articles
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—É—á–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π: {e}")
            return []

    def parse_tech_innovations(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–Ω–Ω–æ–≤–∞—Ü–∏–π"""
        try:
            articles = []
            
            # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏
            innovations = [
                {
                    'title': '–ü–µ—Ä–≤—ã–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω',
                    'content': 'IBM Simon, –≤—ã–ø—É—â–µ–Ω–Ω—ã–π –≤ 1994 –≥–æ–¥—É, —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–º. –û–Ω —Å–æ—á–µ—Ç–∞–ª —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ö–ü–ö.',
                    'year': '1994',
                    'company': 'IBM'
                },
                {
                    'title': '–ü–µ—Ä–≤—ã–π –≤–µ–±-—Å–∞–π—Ç',
                    'content': '–ü–µ—Ä–≤—ã–π –≤ –º–∏—Ä–µ –≤–µ–±-—Å–∞–π—Ç info.cern.ch –±—ã–ª –∑–∞–ø—É—â–µ–Ω –¢–∏–º–æ–º –ë–µ—Ä–Ω–µ—Ä—Å–æ–º-–õ–∏ –≤ 1991 –≥–æ–¥—É. –û–Ω –æ–±—ä—è—Å–Ω—è–ª –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –í—Å–µ–º–∏—Ä–Ω–æ–π –ø–∞—É—Ç–∏–Ω—ã.',
                    'year': '1991',
                    'company': 'CERN'
                },
                {
                    'title': '–ü–µ—Ä–≤—ã–π –º–∏–∫—Ä–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä',
                    'content': 'Intel 4004, –≤—ã–ø—É—â–µ–Ω–Ω—ã–π –≤ 1971 –≥–æ–¥—É, —Å—Ç–∞–ª –ø–µ—Ä–≤—ã–º –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –º–∏–∫—Ä–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º. –û–Ω —Å–æ–¥–µ—Ä–∂–∞–ª 2300 —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä–æ–≤.',
                    'year': '1971',
                    'company': 'Intel'
                },
                {
                    'title': '–ü–µ—Ä–≤–∞—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –º—ã—à—å',
                    'content': '–î—É–≥–ª–∞—Å –≠–Ω–≥–µ–ª—å–±–∞—Ä—Ç –∏–∑–æ–±—Ä–µ–ª –ø–µ—Ä–≤—É—é –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—É—é –º—ã—à—å –≤ 1964 –≥–æ–¥—É. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—ã–ª–æ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º —Å –¥–≤—É–º—è –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–ª–µ—Å–∞–º–∏.',
                    'year': '1964',
                    'company': 'Stanford Research Institute'
                }
            ]
            
            for innovation in random.sample(innovations, 2):
                formatted_post = self.format_tech_post(
                    innovation['title'], 
                    innovation['content'], 
                    innovation['year'], 
                    innovation['company']
                )
                
                articles.append({
                    'title': innovation['title'],
                    'summary': formatted_post,
                    'category': 'technology',
                    'url': '',
                    'image_url': self.get_tech_image(),
                    'found_date': datetime.now()
                })
            
            return articles
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–Ω–Ω–æ–≤–∞—Ü–∏–π: {e}")
            return []

    def parse_cultural_firsts(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –ø–µ—Ä–≤—ã—Ö"""
        try:
            articles = []
            
            cultural_firsts = [
                {
                    'title': '–ü–µ—Ä–≤—ã–π –ø–æ–ª–Ω–æ–º–µ—Ç—Ä–∞–∂–Ω—ã–π –º—É–ª—å—Ç—Ñ–∏–ª—å–º',
                    'content': '¬´–ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞ –∏ —Å–µ–º—å –≥–Ω–æ–º–æ–≤¬ª (1937) —Å—Ç–∞–ª –ø–µ—Ä–≤—ã–º –ø–æ–ª–Ω–æ–º–µ—Ç—Ä–∞–∂–Ω—ã–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∏–ª—å–º–æ–º. –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞–Ω—è–ª–æ 3 –≥–æ–¥–∞.',
                    'year': '1937',
                    'studio': 'Walt Disney'
                },
                {
                    'title': '–ü–µ—Ä–≤–∞—è –∑–≤—É–∫–æ–≤–∞—è –∫–∏–Ω–æ–∫–∞—Ä—Ç–∏–Ω–∞',
                    'content': '¬´–ü–µ–≤–µ—Ü –¥–∂–∞–∑–∞¬ª (1927) —Å—Ç–∞–ª –ø–µ—Ä–≤—ã–º –ø–æ–ª–Ω–æ–º–µ—Ç—Ä–∞–∂–Ω—ã–º —Ñ–∏–ª—å–º–æ–º —Å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–≤—É–∫–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–æ–π.',
                    'year': '1927',
                    'studio': 'Warner Bros.'
                },
                {
                    'title': '–ü–µ—Ä–≤—ã–π —Ä–æ–º–∞–Ω-–∞–Ω—Ç–∏—É—Ç–æ–ø–∏—è',
                    'content': '¬´–ú—ã¬ª –ï–≤–≥–µ–Ω–∏—è –ó–∞–º—è—Ç–∏–Ω–∞ (1920) —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º —Ä–æ–º–∞–Ω–æ–º-–∞–Ω—Ç–∏—É—Ç–æ–ø–∏–µ–π, –ø–æ–≤–ª–∏—è–≤—à–∏–º –Ω–∞ –û—Ä—É—ç–ª–ª–∞ –∏ –•–∞–∫—Å–ª–∏.',
                    'year': '1920',
                    'author': '–ï–≤–≥–µ–Ω–∏–π –ó–∞–º—è—Ç–∏–Ω'
                }
            ]
            
            for cultural in random.sample(cultural_firsts, 2):
                formatted_post = self.format_cultural_post(
                    cultural['title'], 
                    cultural['content'], 
                    cultural['year'], 
                    cultural.get('studio') or cultural.get('author')
                )
                
                articles.append({
                    'title': cultural['title'],
                    'summary': formatted_post,
                    'category': 'culture',
                    'url': '',
                    'image_url': self.get_cultural_image(),
                    'found_date': datetime.now()
                })
            
            return articles
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –ø–µ—Ä–≤—ã—Ö: {e}")
            return []

    def parse_sports_records(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–æ—Ä–¥–æ–≤"""
        try:
            articles = []
            
            sports_records = [
                {
                    'title': '–ü–µ—Ä–≤—ã–π —á–µ—Ç—ã—Ä–µ—Ö–º–∏–Ω—É—Ç–Ω—ã–π –º–∏–ª—è',
                    'content': '–†–æ–¥–∂–µ—Ä –ë–∞–Ω–Ω–∏—Å—Ç–µ—Ä –ø–µ—Ä–≤—ã–º –ø—Ä–æ–±–µ–∂–∞–ª –º–∏–ª—é –±—ã—Å—Ç—Ä–µ–µ 4 –º–∏–Ω—É—Ç 6 –º–∞—è 1954 –≥–æ–¥–∞. –ï–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 3 –º–∏–Ω—É—Ç—ã 59.4 —Å–µ–∫—É–Ω–¥—ã.',
                    'year': '1954',
                    'athlete': '–†–æ–¥–∂–µ—Ä –ë–∞–Ω–Ω–∏—Å—Ç–µ—Ä'
                },
                {
                    'title': '–ü–µ—Ä–≤–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–∞ –≠–≤–µ—Ä–µ—Å—Ç',
                    'content': '–≠–¥–º—É–Ω–¥ –•–∏–ª–ª–∞—Ä–∏ –∏ –¢–µ–Ω—Ü–∏–Ω–≥ –ù–æ—Ä–≥–µ–π –ø–µ—Ä–≤—ã–º–∏ –ø–æ–∫–æ—Ä–∏–ª–∏ –≠–≤–µ—Ä–µ—Å—Ç 29 –º–∞—è 1953 –≥–æ–¥–∞.',
                    'year': '1953',
                    'athlete': '–•–∏–ª–ª–∞—Ä–∏ –∏ –ù–æ—Ä–≥–µ–π'
                },
                {
                    'title': '–ü–µ—Ä–≤—ã–π –æ–ª–∏–º–ø–∏–π—Å–∫–∏–π —á–µ–º–ø–∏–æ–Ω',
                    'content': '–î–∂–µ–π–º—Å –ö–æ–Ω–Ω–æ–ª–∏ —Å—Ç–∞–ª –ø–µ—Ä–≤—ã–º –æ–ª–∏–º–ø–∏–π—Å–∫–∏–º —á–µ–º–ø–∏–æ–Ω–æ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏, –≤—ã–∏–≥—Ä–∞–≤ —Ç—Ä–æ–π–Ω–æ–π –ø—Ä—ã–∂–æ–∫ 6 –∞–ø—Ä–µ–ª—è 1896 –≥–æ–¥–∞.',
                    'year': '1896',
                    'athlete': '–î–∂–µ–π–º—Å –ö–æ–Ω–Ω–æ–ª–∏'
                }
            ]
            
            for record in random.sample(sports_records, 2):
                formatted_post = self.format_sports_post(
                    record['title'], 
                    record['content'], 
                    record['year'], 
                    record['athlete']
                )
                
                articles.append({
                    'title': record['title'],
                    'summary': formatted_post,
                    'category': 'sports',
                    'url': '',
                    'image_url': self.get_sports_image(),
                    'found_date': datetime.now()
                })
            
            return articles
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–æ—Ä–¥–æ–≤: {e}")
            return []

    def parse_invention_history(self):
        """–ò—Å—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–π"""
        try:
            articles = []
            
            inventions = [
                {
                    'title': '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–µ—á–∞—Ç–Ω–æ–≥–æ —Å—Ç–∞–Ω–∫–∞',
                    'content': '–ò–æ–≥–∞–Ω–Ω –ì—É—Ç–µ–Ω–±–µ—Ä–≥ –∏–∑–æ–±—Ä–µ–ª –ø–µ—á–∞—Ç–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ —Å –ø–æ–¥–≤–∏–∂–Ω—ã–º–∏ –ª–∏—Ç–µ—Ä–∞–º–∏ –æ–∫–æ–ª–æ 1440 –≥–æ–¥–∞. –≠—Ç–æ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
                    'year': '1440',
                    'inventor': '–ò–æ–≥–∞–Ω–Ω –ì—É—Ç–µ–Ω–±–µ—Ä–≥'
                },
                {
                    'title': '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ª–∞–º–ø–æ—á–∫–∏',
                    'content': '–¢–æ–º–∞—Å –≠–¥–∏—Å–æ–Ω –∑–∞–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–ª –ø–µ—Ä–≤—É—é –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ª–∞–º–ø—É –Ω–∞–∫–∞–ª–∏–≤–∞–Ω–∏—è –≤ 1879 –≥–æ–¥—É. –û–Ω–∞ –º–æ–≥–ª–∞ –≥–æ—Ä–µ—Ç—å –¥–æ 1200 —á–∞—Å–æ–≤.',
                    'year': '1879',
                    'inventor': '–¢–æ–º–∞—Å –≠–¥–∏—Å–æ–Ω'
                },
                {
                    'title': '–ò–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ —Ä–∞–¥–∏–æ',
                    'content': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–æ–ø–æ–≤ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–≤—ã–π —Ä–∞–¥–∏–æ–ø—Ä–∏–µ–º–Ω–∏–∫ 7 –º–∞—è 1895 –≥–æ–¥–∞. –ì—É–ª—å–µ–ª—å–º–æ –ú–∞—Ä–∫–æ–Ω–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª –ø–æ—Ö–æ–∂—É—é —Å–∏—Å—Ç–µ–º—É.',
                    'year': '1895',
                    'inventor': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–æ–ø–æ–≤'
                }
            ]
            
            for invention in random.sample(inventions, 2):
                formatted_post = self.format_invention_post(
                    invention['title'], 
                    invention['content'], 
                    invention['year'], 
                    invention['inventor']
                )
                
                articles.append({
                    'title': invention['title'],
                    'summary': formatted_post,
                    'category': 'invention',
                    'url': '',
                    'image_url': self.get_invention_image(),
                    'found_date': datetime.now()
                })
            
            return articles
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–π: {e}")
            return []

    def get_wikipedia_content(self, title):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Wikipedia"""
        try:
            url = "https://ru.wikipedia.org/w/api.php"
            params = {
                'action': 'query',
                'prop': 'extracts',
                'titles': title,
                'exintro': True,
                'explaintext': True,
                'format': 'json'
            }
            
            response = self.session.get(url, params=params, timeout=15)
            data = response.json()
            
            pages = data.get('query', {}).get('pages', {})
            for page_id, page_data in pages.items():
                extract = page_data.get('extract', '')
                if extract:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∑–Ω–∞—á–∏–º—ã–π –∞–±–∑–∞—Ü
                    paragraphs = [p for p in extract.split('\n') if p.strip()]
                    if paragraphs:
                        return paragraphs[0][:600] + '...' if len(paragraphs[0]) > 600 else paragraphs[0]
            
            return ""
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Wikipedia: {e}")
            return ""

    def get_wikipedia_image(self, title):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Wikipedia"""
        try:
            url = "https://ru.wikipedia.org/w/api.php"
            params = {
                'action': 'query',
                'prop': 'pageimages',
                'titles': title,
                'pithumbsize': 500,
                'format': 'json'
            }
            
            response = self.session.get(url, params=params, timeout=15)
            data = response.json()
            
            pages = data.get('query', {}).get('pages', {})
            for page_id, page_data in pages.items():
                thumbnail = page_data.get('thumbnail')
                if thumbnail:
                    return thumbnail.get('source', '')
            
            return self.get_random_image()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Wikipedia: {e}")
            return self.get_random_image()

    def create_wikipedia_post(self, title, content, query):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ Wikipedia –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        templates = [
            "üåç –ò–°–¢–û–†–ò–ß–ï–°–ö–û–ï –°–û–ë–´–¢–ò–ï\n\n{title}\n\n{content}\n\nüîç –ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}\n\nüìö –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Å—Ç–∞–ª–æ –≤–∞–∂–Ω–æ–π –≤–µ—Ö–æ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞.\n\n#–∏—Å—Ç–æ—Ä–∏—è #—Å–æ–±—ã—Ç–∏–µ #–ø–∞–º—è—Ç—å",
            
            "üí´ –ü–ï–†–í–´–ô –®–ê–ì\n\n{title}\n\n{content}\n\nüîç –ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}\n\nüöÄ –≠—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã–ª–æ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏.\n\n#–ø–µ—Ä–≤—ã–π #–∏—Å—Ç–æ—Ä–∏—è #–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
            
            "üèÜ –í–ê–ñ–ù–û–ï –û–¢–ö–†–´–¢–ò–ï\n\n{title}\n\n{content}\n\nüîç –ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}\n\nüí° –≠—Ç–æ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ —Ö–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –Ω–∞—à—É –∂–∏–∑–Ω—å.\n\n#–æ—Ç–∫—Ä—ã—Ç–∏–µ #–∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ #–∏—Å—Ç–æ—Ä–∏—è"
        ]
        
        template = random.choice(templates)
        return template.format(title=title.upper(), content=content, query=query)

    def format_historical_post(self, title, content, year):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç"""
        templates = [
            "üìú –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –§–ê–ö–¢\n\n{title}\n\n{content}\n\nüìÖ –ì–æ–¥: {year}\n\nüìö –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Å—Ç–∞–ª–æ –ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–º –º–æ–º–µ–Ω—Ç–æ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏.\n\n#–∏—Å—Ç–æ—Ä–∏—è #—Ñ–∞–∫—Ç #–ø–∞–º—è—Ç—å",
            
            "üï∞Ô∏è –í–ï–•–ê –ò–°–¢–û–†–ò–ò\n\n{title}\n\n{content}\n\nüìÖ –ì–æ–¥: {year}\n\nüéØ –≠—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ —Ö–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏.\n\n#–∏—Å—Ç–æ—Ä–∏—è #–≤–µ—Ö–∞ #–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"
        ]
        
        template = random.choice(templates)
        return template.format(title=title.upper(), content=content, year=year)

    def format_science_post(self, title, content, year, scientist):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞—É—á–Ω—ã–π –ø–æ—Å—Ç"""
        templates = [
            "üî¨ –ù–ê–£–ß–ù–û–ï –û–¢–ö–†–´–¢–ò–ï\n\n{title}\n\n{content}\n\nüìÖ –ì–æ–¥: {year}\nüë®‚Äçüî¨ –£—á–µ–Ω—ã–π: {scientist}\n\nüí´ –≠—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ –Ω–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ –º–∏—Ä–µ.\n\n#–Ω–∞—É–∫–∞ #–æ—Ç–∫—Ä—ã—Ç–∏–µ #–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
            
            "üåå –ü–†–û–†–´–í –í –ù–ê–£–ö–ï\n\n{title}\n\n{content}\n\nüìÖ –ì–æ–¥: {year}\nüë®‚Äçüî¨ –£—á–µ–Ω—ã–π: {scientist}\n\nüöÄ –£—á–µ–Ω—ã–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –≤–∞–∂–Ω—ã–π —à–∞–≥ –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –∑–∞–∫–æ–Ω–æ–≤ –ø—Ä–∏—Ä–æ–¥—ã.\n\n#–Ω–∞—É–∫–∞ #–ø—Ä–æ—Ä—ã–≤ #–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"
        ]
        
        template = random.choice(templates)
        return template.format(title=title.upper(), content=content, year=year, scientist=scientist)

    def format_tech_post(self, title, content, year, company):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç"""
        templates = [
            "‚ö° –¢–ï–•–ù–û–õ–û–ì–ò–ß–ï–°–ö–ê–Ø –†–ï–í–û–õ–Æ–¶–ò–Ø\n\n{title}\n\n{content}\n\nüìÖ –ì–æ–¥: {year}\nüè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company}\n\nüí° –≠—Ç–æ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á.\n\n#—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ #–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ #–±—É–¥—É—â–µ–µ",
            
            "ü§ñ –ò–ù–ù–û–í–ê–¶–ò–û–ù–ù–ê–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ê\n\n{title}\n\n{content}\n\nüìÖ –ì–æ–¥: {year}\nüè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company}\n\nüöÄ –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ - —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã.\n\n#—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ #—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ #–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏"
        ]
        
        template = random.choice(templates)
        return template.format(title=title.upper(), content=content, year=year, company=company)

    def format_person_post(self, title, content, person):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –æ –ª–∏—á–Ω–æ—Å—Ç–∏"""
        templates = [
            "üåü –ò–°–¢–û–†–ò–ß–ï–°–ö–ê–Ø –õ–ò–ß–ù–û–°–¢–¨\n\n{title}\n\n{content}\n\nüë§ –ü–µ—Ä—Å–æ–Ω–∞: {person}\n\nüí´ –≠—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–∞–≤—Å–µ–≥–¥–∞ –∏–∑–º–µ–Ω–∏–ª–æ –º–∏—Ä.\n\n#–∏—Å—Ç–æ—Ä–∏—è #–ª–∏—á–Ω–æ—Å—Ç—å #–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
            
            "üéØ –ü–ï–†–í–´–ô –®–ê–ì\n\n{title}\n\n{content}\n\nüë§ –ü–µ—Ä—Å–æ–Ω–∞: {person}\n\nüöÄ –° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è —ç—Ä–∞.\n\n#–ø–µ—Ä–≤—ã–π #–∏—Å—Ç–æ—Ä–∏—è #–∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ"
        ]
        
        template = random.choice(templates)
        return template.format(title=title.upper(), content=content, person=person)

    def format_cultural_post(self, title, content, year, creator):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –ø–æ—Å—Ç"""
        templates = [
            "üé≠ –ö–£–õ–¨–¢–£–†–ù–û–ï –°–û–ë–´–¢–ò–ï\n\n{title}\n\n{content}\n\nüìÖ –ì–æ–¥: {year}\nüé¨ –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator}\n\nüìö –≠—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –ª–∞–Ω–¥—à–∞—Ñ—Ç.\n\n#–∫—É–ª—å—Ç—É—Ä–∞ #–∏—Å–∫—É—Å—Å—Ç–≤–æ #–∏—Å—Ç–æ—Ä–∏—è",
            
            "üé® –¢–í–û–†–ß–ï–°–ö–ò–ô –ü–†–û–†–´–í\n\n{title}\n\n{content}\n\nüìÖ –ì–æ–¥: {year}\nüé¨ –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator}\n\nüí´ –≠—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã–ª–æ –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ.\n\n#–∫—É–ª—å—Ç—É—Ä–∞ #—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ #–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏"
        ]
        
        template = random.choice(templates)
        return template.format(title=title.upper(), content=content, year=year, creator=creator)

    def format_sports_post(self, title, content, year, athlete):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç"""
        templates = [
            "üèÜ –°–ü–û–†–¢–ò–í–ù–´–ô –†–ï–ö–û–†–î\n\n{title}\n\n{content}\n\nüìÖ –ì–æ–¥: {year}\nüèÉ‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç—Å–º–µ–Ω: {athlete}\n\nüí™ –≠—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–ª–æ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞.\n\n#—Å–ø–æ—Ä—Ç #—Ä–µ–∫–æ—Ä–¥ #–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
            
            "üöÄ –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢\n\n{title}\n\n{content}\n\nüìÖ –ì–æ–¥: {year}\nüèÉ‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç—Å–º–µ–Ω: {athlete}\n\nüéØ –≠—Ç–æ—Ç —Ä–µ–∫–æ—Ä–¥ –Ω–∞–≤—Å–µ–≥–¥–∞ –≤–æ—à–µ–ª –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–ø–æ—Ä—Ç–∞.\n\n#—Å–ø–æ—Ä—Ç #–∏—Å—Ç–æ—Ä–∏—è #–º–æ–º–µ–Ω—Ç"
        ]
        
        template = random.choice(templates)
        return template.format(title=title.upper(), content=content, year=year, athlete=athlete)

    def format_invention_post(self, title, content, year, inventor):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –æ–± –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–∏"""
        templates = [
            "üí° –í–ï–õ–ò–ö–û–ï –ò–ó–û–ë–†–ï–¢–ï–ù–ò–ï\n\n{title}\n\n{content}\n\nüìÖ –ì–æ–¥: {year}\nüë®‚Äçüî¨ –ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å: {inventor}\n\n‚ö° –≠—Ç–æ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ –∂–∏–∑–Ω—å –ª—é–¥–µ–π.\n\n#–∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ #–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ #–∏—Å—Ç–æ—Ä–∏—è",
            
            "üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ü–†–û–†–´–í\n\n{title}\n\n{content}\n\nüìÖ –ì–æ–¥: {year}\nüë®‚Äçüî¨ –ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å: {inventor}\n\nüöÄ –≠—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã–ª–æ –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã.\n\n#—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ #–ø—Ä–æ—Ä—ã–≤ #–∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ"
        ]
        
        template = random.choice(templates)
        return template.format(title=title.upper(), content=content, year=year, inventor=inventor)

    def detect_category(self, title, content):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        text = (title + content).lower()
        
        if any(word in text for word in ['–Ω–∞—É–∫–∞', '—É—á–µ–Ω—ã–π', '–æ—Ç–∫—Ä—ã—Ç–∏–µ', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ']):
            return 'science'
        elif any(word in text for word in ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω']):
            return 'technology'
        elif any(word in text for word in ['–∏—Å—Ç–æ—Ä–∏—è', '–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π', '–ø—Ä–æ—à–ª–æ–µ', '–¥—Ä–µ–≤–Ω–∏–π']):
            return 'history'
        elif any(word in text for word in ['–∫—É–ª—å—Ç—É—Ä–∞', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–∫–∏–Ω–æ', '–º—É–∑—ã–∫–∞']):
            return 'culture'
        elif any(word in text for word in ['—Å–ø–æ—Ä—Ç', '—Å–ø–æ—Ä—Ç—Å–º–µ–Ω', '—Ä–µ–∫–æ—Ä–¥', '–æ–ª–∏–º–ø–∏–π—Å–∫–∏–π']):
            return 'sports'
        else:
            return 'achievement'

    def get_science_image(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—É—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        science_images = [
            'https://images.unsplash.com/photo-1532094349884-543bc11b234d?w=500&fit=crop',
            'https://images.unsplash.com/photo-1563089145-599997674d42?w=500&fit=crop',
            'https://images.unsplash.com/photo-1554475900-0a0350e3fc7b?w=500&fit=crop',
            'https://images.unsplash.com/photo-1507413245164-6160d8298b31?w=500&fit=crop'
        ]
        return random.choice(science_images)

    def get_tech_image(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤"""
        tech_images = [
            'https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=500&fit=crop',
            'https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?w=500&fit=crop',
            'https://images.unsplash.com/photo-1542831371-29b0f74f9713?w=500&fit=crop',
            'https://images.unsplash.com/photo-1550751827-4bd374c3f58b?w=500&fit=crop'
        ]
        return random.choice(tech_images)

    def get_historical_image(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤"""
        historical_images = [
            'https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=500&fit=crop',
            'https://images.unsplash.com/photo-1589652717521-10c0d092dea9?w=500&fit=crop',
            'https://images.unsplash.com/photo-1451187580459-43490279c0fa?w=500&fit=crop',
            'https://images.unsplash.com/photo-1505664194779-8beaceb93744?w=500&fit=crop'
        ]
        return random.choice(historical_images)

    def get_cultural_image(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        cultural_images = [
            'https://images.unsplash.com/photo-1514320291840-2e0a9bf2a9ae?w=500&fit=crop',
            'https://images.unsplash.com/photo-1492684223066-81342ee5ff30?w=500&fit=crop',
            'https://images.unsplash.com/photo-1503095396549-807759245b35?w=500&fit=crop'
        ]
        return random.choice(cultural_images)

    def get_sports_image(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        sports_images = [
            'https://images.unsplash.com/photo-1461896836934-ffe607ba8211?w=500&fit=crop',
            'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=500&fit=crop',
            'https://images.unsplash.com/photo-1556817411-31ae72fa3ea0?w=500&fit=crop'
        ]
        return random.choice(sports_images)

    def get_achievement_image(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö"""
        achievement_images = [
            'https://images.unsplash.com/photo-1563089145-599997674d42?w=500&fit=crop',
            'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=500&fit=crop',
            'https://images.unsplash.com/photo-1517048676732-d65bc937f952?w=500&fit=crop'
        ]
        return random.choice(achievement_images)

    def get_invention_image(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –æ–± –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è—Ö"""
        invention_images = [
            'https://images.unsplash.com/photo-1506744038136-46273834b3fb?w=500&fit=crop',
            'https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=500&fit=crop',
            'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=500&fit=crop'
        ]
        return random.choice(invention_images)

    def get_random_image(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        all_images = (
            self.get_science_image(),
            self.get_tech_image(),
            self.get_historical_image(),
            self.get_cultural_image(),
            self.get_sports_image(),
            self.get_achievement_image(),
            self.get_invention_image()
        )
        return random.choice(all_images)

    def is_relevant_content(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –∏—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        keywords = [
            '–ø–µ—Ä–≤—ã–π', '–ø–µ—Ä–≤–æ–µ', '–ø–µ—Ä–≤–∞—è', '–≤–ø–µ—Ä–≤—ã–µ', '–≤–ø–µ—Ä–≤—ã',
            '–∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ', '–æ—Ç–∫—Ä—ã—Ç–∏–µ', '—Ä–µ–≤–æ–ª—é—Ü–∏—è', '–ø—Ä–æ—Ä—ã–≤',
            '—Ä–µ–∫–æ—Ä–¥', '–∏—Å—Ç–æ—Ä–∏—è', '—Å–æ–∑–¥–∞–Ω', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω', '–∑–∞–ø—É—â–µ–Ω',
            '–æ–±–Ω–∞—Ä—É–∂–µ–Ω', '–Ω–∞—á–∞–ª–æ', '–≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ', '–ø–æ—è–≤–ª–µ–Ω–∏–µ',
            '–æ—Å–Ω–æ–≤–∞–Ω–∏–µ', '—Å–æ–∑–¥–∞–Ω–∏–µ', '–∏–∑–æ–±—Ä–µ—Ç', '–æ—Ç–∫—Ä—ã—Ç', '–Ω–æ–≤–∞—è —ç—Ä–∞',
            '–ø–µ—Ä–µ–ª–æ–º–Ω—ã–π –º–æ–º–µ–Ω—Ç', '–∑–Ω–∞–∫–æ–≤–æ–µ', '—ç–ø–æ—Ö–∞–ª—å–Ω–æ–µ', '–ø–∏–æ–Ω–µ—Ä',
            '–ø–µ—Ä–≤–æ–æ—Ç–∫—Ä—ã–≤–∞—Ç–µ–ª—å', '–Ω–æ–≤–∞—Ç–æ—Ä', '–∏–Ω–Ω–æ–≤–∞—Ü'
        ]
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in keywords)

    def format_for_preview(self, content):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        current_time = datetime.now()
        preview_text = f"üì∞ –ù–û–í–´–ô –ü–û–°–¢ –î–õ–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ò\n\n{content['summary']}\n\n"
        
        if content.get('image_url'):
            preview_text += f"üñºÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
        
        preview_text += f"‚è∞ –ù–∞–π–¥–µ–Ω–æ: {current_time.strftime('%H:%M %d.%m.%Y')}"
        
        return preview_text

def setup_content_finder(db_manager=None):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π db_manager"""
    return ContentFinder(db_manager)
